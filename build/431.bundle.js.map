{"version":3,"file":"431.bundle.js","mappings":"iLAwCIA,E,oEArCSC,EAAc,mCAAG,WAAOC,EAAYC,GAAnB,gFAEtBC,EAAU,CACdC,OAAQ,MACRC,IAAK,oBAAF,OAAsBJ,EAAtB,YAA4BC,GAC/BI,aAAc,QALY,kBAQdC,IAAAA,QAAcJ,GARA,cAQ1BK,EAR0B,yBASnBA,GATmB,yDAWlBA,EAAM,MAXY,yDAAH,wDAedC,EAAS,mCAAG,WAAOC,GAAP,oFAIjBP,EAAU,CACdC,OAAQ,OACRC,IAAK,UACLM,KAAM,CACJC,SAAUF,IARS,mBAaHG,EAAAA,EAAAA,GAAaV,GAbV,cAafK,EAbe,OAcrBG,EAAOH,EAAIG,KACXG,EAAQN,EAAIM,MAfS,kBAgBd,CAAEH,KAAAA,EAAMG,MAAAA,IAhBM,2DAkBd,CAAEH,UAAMI,EAAWD,MAAO,EAAF,KAlBV,0DAAH,sDAwBTE,EAAY,mCAAG,WAAOC,GAAP,+EACtB,sBAAOlB,IACTA,EAAYmB,OAAO,gCAGrBnB,EAAcQ,IAAAA,YAAAA,SAERJ,EAAU,CACdC,OAAQ,QACRC,IAAK,UACLN,YAAaA,EAAYoB,MACzBR,KAAMM,GAXkB,SAcmBV,IAAAA,QAClCJ,GACRiB,MAAK,SAACZ,GACL,MAAO,CAAEG,KAAMH,EAAIG,KAAMG,WAAOC,EACjC,IAJ0C,OAKpC,SAACD,GAEJ,MAAO,CAAEH,UAAMI,EAAWD,MAAOA,EAEpC,IAvBuB,cAcpBN,EAdoB,yBAwBnBA,GAxBmB,2CAAH,sDA2BZa,EAAa,mCAAG,WAAOpB,EAAYgB,GAAnB,oFAIrBd,EAAU,CACdC,OAAQ,QACRC,IAAK,WAAF,OAAaJ,EAAb,WACHqB,QAAS,CAAE,eAAgB,uBAC3BX,KAAMM,GARmB,mBAYPJ,EAAAA,EAAAA,GAAaV,GAZN,cAYnBK,EAZmB,OAazBG,EAAOH,EAAIG,KACXG,EAAQN,EAAIM,MAda,kBAelB,CAAEH,KAAAA,EAAMG,MAAAA,IAfU,2DAiBlB,CAAEH,UAAMI,EAAWD,MAAO,EAAF,KAjBN,0DAAH,wDAqBbS,EAAa,mCAAG,WAAOtB,GAAP,oFAIrBE,EAAU,CACdC,OAAQ,SACRC,IAAK,WAAF,OAAaJ,EAAb,YANsB,mBAUPY,EAAAA,EAAAA,GAAaV,GAVN,cAUnBK,EAVmB,OAWzBG,EAAOH,EAAIG,KACXG,EAAQN,EAAIM,MAZa,kBAalB,CAAEH,KAAAA,EAAMG,MAAAA,IAbU,2DAelB,CAAEH,UAAMI,EAAWD,MAAO,EAAF,KAfN,0DAAH,sDAmBbU,EAAY,mCAAG,WAAOvB,GAAP,oFAIpBE,EAAU,CACdC,OAAQ,SACRC,IAAK,WAAF,OAAaJ,IANQ,mBAUNY,EAAAA,EAAAA,GAAaV,GAVP,cAUlBK,EAVkB,OAWxBG,EAAOH,EAAIG,KACXG,EAAQN,EAAIM,MAZY,kBAajB,CAAEH,KAAAA,EAAMG,MAAAA,IAbS,2DAejB,CAAEH,UAAMI,EAAWD,MAAO,EAAF,KAfP,0DAAH,qD,wvBCtFlB,IAAMW,EAAkB,mCAAG,WAChCC,EACAf,EAGAgB,EACAC,EACAC,EACAC,GARgC,+EAU5BH,GAAYhB,EAAKV,GAVW,wDAWhC2B,GAAW,GAXqB,mBAaSP,EAAAA,EAAAA,IAAcV,EAAKV,GAAIyB,GAbhC,mBAahBK,EAbgB,EAatBpB,KAAeG,EAbO,EAaPA,OACnBiB,GAAYjB,EAdc,iBAe5Be,EAAS,SAAUE,EAAQC,OAAOC,QAfN,8BAiBtB,IAAIC,MAAM,0BAjBY,0DAoB9BJ,EAAU,CACR5B,KAAM,SACNiC,QAAS,OACTC,QAAS,2BAvBmB,iCA2BzBR,GAAW,IA3Bc,0DAAH,gEAuClBS,EAAkB,mCAAG,WAChC1B,EAGAgB,EACAC,EACAC,EACAC,GAPgC,+EAS5BH,GAAYhB,EAAKV,GATW,wDAUhC2B,GAAW,GAVqB,mBAYSL,EAAAA,EAAAA,IAAcZ,EAAKV,IAZ5B,mBAYhB8B,EAZgB,EAYtBpB,KAAeG,EAZO,EAYPA,OACnBiB,GAAYjB,EAbc,iBAe5Be,EAAS,SAAUE,EAAQC,OAAOC,QAfN,8BAgBjB,IAAIC,MAAM,0BAhBO,0DAkB9BJ,EAAU,CACR5B,KAAM,SACNiC,QAAS,OACTC,QAAS,2BArBmB,iCAyBzBR,GAAW,IAzBc,0DAAH,8DAuClBU,EAAoB,mCAAG,WAClCC,EACAC,EACAC,EACA9B,EAGAgB,EACAC,EACAC,EACAC,GAVkC,8EAY5BJ,EAAW,IAAIgB,SAZa,kBAc3BF,EAAgBG,QACrB,SAACC,GAECC,EACED,EACAlB,EACAa,EACAE,EACA9B,EACAgB,EACAC,EACAC,EACAC,EAEH,GACD,aACA,KA9BgC,2CAAH,oEA+CpBe,EAAuB,SAClCD,EACAlB,EACAa,EACAE,EACA9B,EAGAgB,EACAC,EACAC,EACAC,GAEA,GAAKc,EAIL,OAHAlB,EAASoB,OAAO,YAAaF,EAAM,iBACnClB,EAASoB,OAAO,QAASP,GACzBb,EAASoB,OAAO,QAASC,KAAKC,UAAUP,IACjChB,EACLC,EACAf,EACAgB,EACAC,EACAC,EACAC,EAEH,EAaYmB,EAAiB,mCAAG,WAC/BhD,EACAU,EACAgB,EACAC,EACAsB,EACApB,EACAqB,GAP+B,gFAS/BD,EAAgB,OACZvB,EAV2B,wDAW/BC,EAAW3B,GAXoB,mBAaUuB,EAAAA,EAAAA,IAAavB,GAbvB,mBAaf8B,EAbe,EAarBpB,KAAeG,EAbM,EAaNA,OACnBiB,GAAYjB,EAda,iBAerBsC,EAAUzC,EAAK0C,QAAO,SAACC,GAAD,OAAeA,EAAKC,MAAQtD,CAA5B,IAC5BkD,EAAYK,aAAa,UAAWJ,GAhBT,8BAiBhB,IAAIlB,MAAM,2BAjBM,0DAmB7BJ,EAAU,CACR5B,KAAM,SACNiC,QAAS,OACTC,QAAS,4BAtBkB,iCAyBxBR,EAAW,OAzBa,0DAAH,kEAoCjB6B,EAAoB,mCAAG,WAClCC,EACAzD,EACAC,EACA4B,GAJkC,gGAMX9B,EAAAA,EAAAA,GAAeC,EAAIC,GANR,WAM5BM,EAN4B,SAOrBA,EAAIG,KAPiB,uBAQhCmB,EAAU,CACR5B,KAAM,SACNiC,QAAS,OACTC,QAAS,8BAXqB,iCAe5BuB,EAAUD,EAAOA,EAAKE,WAAW,MAAO,KAAO,kBAE/CC,EAAWF,EAAU,IAAMzD,EAE3BG,EAAMyD,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACzD,EAAIG,SAC/CuD,EAAOC,SAASC,cAAc,MAC/BC,KAAOhE,EACZ6D,EAAKI,aAAa,WAAYT,GAC9BM,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLN,SAASI,KAAKG,YAAYR,GAzBQ,kBA0B3BJ,OAAOC,IAAIY,gBAAgBtE,IA1BA,4CAAH,4DAuCpBuE,EAAwB,SACnClB,EACAmB,EACAC,EACAhC,EACAiC,EACAC,EACAC,GAEA,GAAKF,EAQH,OAAOC,EAAQ,MAPf,IAAKH,GAAkC,IAArBA,EAAUK,OAAc,CACxC,IAAMC,EAAcL,EACpBG,EAAQvB,EAAO,MACfZ,EAAOqC,EACR,CACD,OAAOH,EAAQtB,EAIlB,EAMY0B,EAA4B,SAACC,EAAaC,GACrD,OAAOD,EAAOC,EACf,EAUYC,EAA2B,SACtC7B,EACA4B,EACAE,EACAC,EACAR,GAEIQ,IAAS/B,EAAO,IAAM4B,GACxBE,EAAQ9B,GACRuB,EAAQ,OAERA,EAAQvB,EAAO,IAAM4B,EAExB,EAUYI,EAA2B,SACtChC,EACAiC,EACAb,EACAhC,EACAmC,GAEA,IAAME,EAASL,EACfG,EAAQvB,EAAO,IAAMiC,GACrB7C,EAAOqC,EAER,EAeYS,EAAgB,mCAAG,WAC9BhF,EACAV,EACA2F,EACAlF,EACAmF,EACAC,EACAC,EACAlE,EACAqB,GAT8B,sFAW1B8C,GAAS,EAXiB,SAc5BD,GAAiB,GACZrF,EAfuB,yCAeVsF,GAfU,wBAgBWjF,EAAAA,EAAAA,IAAa,EAAD,CACjDkF,MAAOvF,EAAKuF,MACZtF,SAAAA,EACAX,GAAI4F,EAAYtC,KACb5C,IApBuB,mBAgBdoB,EAhBc,EAgBpBpB,KAAeG,EAhBK,EAgBLA,OAMnBiB,GAAYjB,EAtBY,qBAuBtBZ,EAvBsB,wBAwBlBwD,EAAO3B,EAAQmE,MAAQnE,EAAQmE,MAAQ,GAxBrB,UAyBlBzC,EACJC,EACAmC,EAAYtC,IACZrD,EACA4B,GA7BsB,SAiCpBqE,EACJhD,EAAYiD,aAAa,eAEnBC,EAAOF,EAAQG,WAAU,SAAChD,GAAD,OAAUA,EAAKC,MAAQxB,EAAQwB,GAA/B,MACnB,EACV4C,EAAQI,OAAOF,EAAM,EAAGtE,GAExBoE,EAAQK,QAAQzE,GAElBoB,EAAYK,aAAa,UAAW2C,IAGtCpE,EAAQC,OAAS8D,IAEjB3C,EAAYK,aAAa,CAAC,SAAUzB,EAAQwB,KAAMxB,GAClDiE,GAAiB,GACjBD,EACE,CAAC,EACD,CACEU,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,YAAY,IAvDU,4BA2DtBrG,IAAAA,SAAeO,GA3DO,iBA2DCkF,GAAiB,GA3DlB,8BA6DlB,IAAI9D,MAAM,2BA7DQ,QAgE5B+D,GAAS,EAhEmB,kDAkE5BnE,EAAU,CACR5B,KAAM,SACNiC,QAAS,OACTC,QAAS,4BArEiB,iCAwEvB6D,GAxEuB,0DAAH,qE,yDC7T7B,QAxB2B,WACzB,OAAkCY,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAMC,EAAAA,EAAAA,QAAY,MAElBC,EAAqB,SAACC,GACrBH,GAAQA,EAAII,UACZJ,EAAII,QAAQC,SAASF,EAAEG,QAG1BP,GAAa,GAFbA,GAAa,GAIhB,EAUD,OARAQ,EAAAA,EAAAA,YAAU,WACR,GAAKP,GAAQA,EAAII,QAEjB,OADAjD,SAASqD,iBAAiB,YAAaN,GAAoB,GACpD,WACL/C,SAASsD,oBAAoB,YAAaP,GAAoB,EAC/D,CACF,GAAE,CAACF,EAAII,UAED,CAAEN,UAAAA,EAAWE,IAAAA,EACrB,C,qICpBYU,EAAwB,WACnC,OAAOC,EAAAA,EAAAA,GAAS,kBAAD,oBAChB,EAMYC,EAAgB,WAC3B,IAAMC,EAAO,mCAAG,sGACStH,IAAAA,IAAA,WADT,uBACNI,EADM,EACNA,KADM,kBAEPA,GAFO,2CAAH,qDAKb,OAAOmH,EAAAA,EAAAA,GAAgB,WAAW,kBAAMD,GAAN,GACnC,EAQYE,EAAoB,SAACnH,EAAkBoH,GAClD,IAAMH,EAAO,mCAAG,WAAOnE,GAAP,yFACSnD,IAAAA,IAAA,4BAA+BmD,IADxC,uBACN/C,EADM,EACNA,KADM,kBAEPA,GAFO,2CAAH,sDAKb,OAAOmH,EAAAA,EAAAA,GACL,CAAC,kBAAmBlH,IACpB,kBAAMiH,EAAQjH,EAAd,GACAoH,EAEH,EAOYC,EAAY,SAAChI,EAAY+H,GACpC,IAAME,EAAW,mCAAG,WAAOjI,GAAP,yFACKM,IAAAA,IAAA,kBAAqBN,IAD1B,uBACVU,EADU,EACVA,KADU,kBAEXA,GAFW,2CAAH,sDAIjB,OAAOmH,EAAAA,EAAAA,GAAgB,CAAC,SAAU7H,IAAK,kBAAMiI,EAAYjI,EAAlB,GAAuB+H,EAC/D,C","sources":["webpack://user-dashboard/./src/apis/resume.ts","webpack://user-dashboard/./src/helpers/resume.ts","webpack://user-dashboard/./src/hooks/detectOutsideClick.ts","webpack://user-dashboard/./src/queries/resumeQueries.ts"],"sourcesContent":["import axios from 'axios'\nimport axiosRequest from '../helpers/axiosRequest'\n\nexport const downloadResume = async (id: string, type: string) => {\n  let res\n  const options = {\n    method: 'GET',\n    url: `/resume/download/${id}/${type}`,\n    responseType: 'blob',\n  }\n  try {\n    res = await axios.request(options as any)\n    return res\n  } catch (err) {\n    return (res = null)\n  }\n}\n\nexport const newResume = async (templateName?: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'POST',\n    url: '/resume',\n    data: {\n      template: templateName,\n    },\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nlet cancelToken: any\n\nexport const updateResume = async (reqData: any) => {\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel('Cancelling previous requests')\n  }\n\n  cancelToken = axios.CancelToken.source()\n\n  const options = {\n    method: 'PATCH',\n    url: '/resume',\n    cancelToken: cancelToken.token,\n    data: reqData,\n  }\n\n  const res: { data: any; error: any } = await axios\n    .request(options as any)\n    .then((res) => {\n      return { data: res.data, error: undefined }\n    })\n    .catch((error) => {\n      {\n        return { data: undefined, error: error }\n      }\n    })\n  return res\n}\n\nexport const uploadPicture = async (id: string, reqData: any) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'PATCH',\n    url: `/resume/${id}/avatar`,\n    headers: { 'Content-Type': 'multipart/form-data' },\n    data: reqData,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nexport const deletePicture = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/resume/${id}/avatar`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nexport const deleteResume = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/resume/${id}`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n","import axios from 'axios'\nimport { UseFormReset, UseFormWatch } from 'react-hook-form/dist/types/form'\nimport { QueryClient } from 'react-query'\nimport {\n  deletePicture,\n  deleteResume,\n  downloadResume,\n  updateResume,\n  uploadPicture,\n} from '../apis/resume'\nimport { IImgTransformStyle } from '../typings/imageUpload'\nimport { IResumeDefault } from '../typings/resume'\n\n/**\n * Uploads Resume Avatar\n * @param formData multipart/form-data\"\n * @param data resume data object\n * @param loading state as boolean\n * @param setLoading setstate Fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns void\n */\nexport const uploadResumeAvatar = async (\n  formData: FormData,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: boolean) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (loading || !data.id) return\n  setLoading(true)\n  try {\n    const { data: resData, error } = await uploadPicture(data.id, formData)\n    if (resData && !error) {\n      setValue('avatar', resData.fields.avatar)\n    } else {\n      throw new Error('Failed to upload image')\n    }\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to upload image',\n    })\n  }\n\n  return setLoading(false)\n}\n\n/**\n * Deletes uploaded resume avatar\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns boolean\n */\nexport const deleteResumeAvatar = async (\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: boolean) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (loading || !data.id) return\n  setLoading(true)\n  try {\n    const { data: resData, error } = await deletePicture(data.id)\n    if (resData && !error) {\n      /* istanbul ignore next line */\n      setValue('avatar', resData.fields.avatar)\n    } else throw new Error('Failed to delete Image')\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete image',\n    })\n  }\n\n  return setLoading(false)\n}\n\n/**\n * Appends image blob to form data\n * @param orignalImage unproccessed image file blob / url string\n * @param processedCanvas proccessed blob from canvas\n * @param style image transform styles\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n */\nexport const appendBlobToFromData = async (\n  orignalImage: File | string,\n  processedCanvas: HTMLCanvasElement,\n  style: IImgTransformStyle,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: any) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  const formData = new FormData()\n\n  return processedCanvas.toBlob(\n    (blob) => {\n      /* istanbul ignore next line */\n      processdCanvasToBlob(\n        blob,\n        formData,\n        orignalImage,\n        style,\n        data,\n        loading,\n        setLoading,\n        setValue,\n        setNotify\n      )\n    },\n    'image/jpeg',\n    80\n  )\n}\n\n/**\n * Appends formdata and uploads\n * @param blob Blob | null\n * @param formData from FormData()\n * @param orignalImage unproccessed image file blob / url string\n * @param style image transform styles\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns\n */\nexport const processdCanvasToBlob = (\n  blob: Blob | null,\n  formData: FormData,\n  orignalImage: File | string,\n  style: IImgTransformStyle,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: any) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (!blob) return\n  formData.append('processed', blob, 'processed.jpg')\n  formData.append('image', orignalImage)\n  formData.append('style', JSON.stringify(style))\n  return uploadResumeAvatar(\n    formData,\n    data,\n    loading,\n    setLoading,\n    setValue,\n    setNotify\n  )\n}\n\n/**\n * Deletes single user resume\n * @param id resume object _id\n * @param data resume data\n * @param loading resume id in loading state or null\n * @param setLoading setState fn\n * @param setDeleteItemId setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQureyClient\n * @returns void\n */\nexport const deleteSigleResume = async (\n  id: string,\n  data: Record<string, any>,\n  loading: string | null,\n  setLoading: (_val: any) => void,\n  setDeleteItemId: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  setDeleteItemId(null)\n  if (loading) return\n  setLoading(id)\n  try {\n    const { data: resData, error } = await deleteResume(id)\n    if (resData && !error) {\n      const newData = data.filter((item: any) => item._id !== id)\n      queryClient.setQueryData('resumes', newData)\n    } else throw new Error('Failed to delete resume')\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete resume',\n    })\n  }\n  return setLoading(null)\n}\n\n/**\n * Download user created resume\n * @param name titile of the resume\n * @param id resume object _id\n * @param type document type to download\n * @param setNotify from useNotify()\n * @returns void\n */\nexport const handleResumeDownload = async (\n  name: string,\n  id: string,\n  type: 'pdf' | 'docx' | 'txt',\n  setNotify: (_val: any) => void\n) => {\n  const res: any = await downloadResume(id, type)\n  if (!res || !res.data) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to donwload design',\n    })\n    return\n  }\n  const docName = name ? name.replaceAll(/\\s/g, '-') : 'untitled-resume'\n\n  const filename = docName + '.' + type\n\n  const url = window.URL.createObjectURL(new Blob([res.data]))\n  const link = document.createElement('a')\n  link.href = url\n  link.setAttribute('download', filename)\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n  return window.URL.revokeObjectURL(url)\n}\n\n/**\n * Toggles resume accoridan\n * @param name field of the accoridan\n * @param accordian accordian object from data\n * @param defaultValues defauly values for accordian\n * @param append from useFieldArray()\n * @param show should expand accordian\n * @param setShow setState fn\n * @param setOpen setState Fn\n */\nexport const resumeToggleAccordian = (\n  name: string,\n  accordian: any,\n  defaultValues: any,\n  append: any,\n  show: boolean,\n  setShow: (_val: any) => void,\n  setOpen: (_val: any) => void\n) => {\n  if (!show) {\n    if (!accordian || accordian.length === 0) {\n      const values: any = defaultValues\n      setOpen(name + '.0')\n      append(values)\n    }\n    return setShow(name)\n  } else {\n    return setShow(null)\n  }\n}\n/**\n * Removes items from accoridan\n * @param remove from useFieldArray()\n * @param index of the item\n */\nexport const resumeDeleteAccordianItem = (remove: any, index: number) => {\n  return remove(index)\n}\n\n/**\n * Opens Accrodian Items\n * @param name accordian identifier\n * @param index position of item in accordian list\n * @param trigger from useFormContext()\n * @param open accoridain items thats expanded\n * @param setOpen setState fn\n */\nexport const resumeOpensAccordianItem = (\n  name: string,\n  index: number,\n  trigger: any,\n  open: string | null,\n  setOpen: (_val: any) => void\n) => {\n  if (open === name + '.' + index) {\n    trigger(name)\n    setOpen(null)\n  } else {\n    setOpen(name + '.' + index)\n  }\n}\n\n/**\n * Adds Items to Resume Accoridian\n * @param name accoridan identifier\n * @param fieldsCount total fields count\n * @param defaultValues defaltValues of accordian\n * @param append from useFielldArray()\n * @param setOpen setstate fn\n */\nexport const resumeAddItemToAccoridan = (\n  name: string,\n  fieldsCount: number,\n  defaultValues: any,\n  append: any,\n  setOpen: (_val: any) => void\n) => {\n  const values = defaultValues\n  setOpen(name + '.' + fieldsCount)\n  append(values)\n  //   clearErrors([`courses.${fields.length}.course`])\n}\n\n/**\n * Handlers resume form submit\n * @param template Name of the template\n * @param type type of template user want to download\n * @param initialData initaal resume data\n * @param data user filled form data from handleSubmit()\n * @param watch form useFrom() | useFormContext()\n * @param reset form useFrom() | useFormContext()\n * @param setSubmitSuccess setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQueryClient\n * @returns boolean\n */\nexport const submitResumeFrom = async (\n  template: string,\n  type: 'txt' | 'pdf' | 'docx' | null | undefined,\n  initialData: any,\n  data: any,\n  watch: UseFormWatch<any>,\n  reset: UseFormReset<any>,\n  setSubmitSuccess: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  let result = false\n\n  try {\n    setSubmitSuccess(false)\n    if (!data) return result\n    const { data: resData, error } = await updateResume({\n      title: data.title,\n      template,\n      id: initialData._id,\n      ...data,\n    })\n    if (resData && !error) {\n      if (type) {\n        const name = resData.title ? resData.title : ''\n        await handleResumeDownload(\n          name,\n          initialData._id,\n          type as any,\n          setNotify\n        )\n      }\n\n      const resumes: Array<any> | undefined =\n        queryClient.getQueryData('resumes')\n      if (resumes) {\n        const find = resumes.findIndex((item) => item._id === resData._id)\n        if (find >= 0) {\n          resumes.splice(find, 1, resData)\n        } else {\n          resumes.unshift(resData)\n        }\n        queryClient.setQueryData('resumes', resumes)\n      }\n\n      resData.fields = watch()\n\n      queryClient.setQueryData(['resume', resData._id], resData)\n      setSubmitSuccess(true)\n      reset(\n        {},\n        {\n          keepDirty: false,\n          keepValues: true,\n          keepIsValid: true,\n          keepErrors: true,\n        }\n      )\n    } else {\n      if (axios.isCancel(error)) setSubmitSuccess(true)\n      else {\n        throw new Error('Failed to update design')\n      }\n    }\n    result = true\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to update design',\n    })\n  }\n  return result\n}\n","import { useEffect, useRef, useState } from 'react'\n\n/**\n * Detects if user clicks outside element boundary, tweaked for multiple elements in same list\n * @returns ref object of selected element\n */\nconst detectOutsideClick = () => {\n  const [isOutside, setIsOutside] = useState(false)\n  const ref = useRef<any>(null)\n\n  const handleClickOutside = (e: any) => {\n    if (!ref || !ref.current) return\n    if (!ref.current.contains(e.target)) {\n      setIsOutside(true)\n    } else {\n      setIsOutside(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!ref || !ref.current) return\n    document.addEventListener('mousedown', handleClickOutside, true)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside, true)\n    }\n  }, [ref.current])\n\n  return { isOutside, ref }\n}\n\nexport default detectOutsideClick\n","import axios from 'axios'\nimport getQuery from '../hooks/getQuery'\nimport getQueryAdvance from '../hooks/getQueryAdvance'\n\n/**\n * Gets All resume templates\n * @returns UseQueryResult\n */\nexport const getAllResumeTemplates = () => {\n  return getQuery('resumeTemplates', `/templates/resume`)\n}\n\n/**\n * Gets all user created resume\n * @returns UseQueryResult\n */\nexport const getAllResumes = () => {\n  const fetcher = async () => {\n    const { data } = await axios.get(`/resume`)\n    return data\n  }\n\n  return getQueryAdvance('resumes', () => fetcher())\n}\n\n/**\n * Gets single resume template\n * @param template resume template object _id\n * @param enabled should quey be enabled?\n * @returns UseQueryResult\n */\nexport const getResumeTemplate = (template: string, enabled?: boolean) => {\n  const fetcher = async (name: string) => {\n    const { data } = await axios.get(`/templates/resume/${name}`)\n    return data\n  }\n\n  return getQueryAdvance(\n    ['resumeTemplates', template],\n    () => fetcher(template),\n    enabled\n  )\n}\n/**\n * Gets single user resume\n * @param id resume object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getResume = (id: string, enabled?: boolean) => {\n  const fetchResume = async (id: string) => {\n    const { data } = await axios.get(`/resume/${id}`)\n    return data\n  }\n  return getQueryAdvance(['resume', id], () => fetchResume(id), enabled)\n}\n"],"names":["cancelToken","downloadResume","id","type","options","method","url","responseType","axios","res","newResume","templateName","data","template","axiosRequest","error","undefined","updateResume","reqData","cancel","token","then","uploadPicture","headers","deletePicture","deleteResume","uploadResumeAvatar","formData","loading","setLoading","setValue","setNotify","resData","fields","avatar","Error","heading","message","deleteResumeAvatar","appendBlobToFromData","orignalImage","processedCanvas","style","FormData","toBlob","blob","processdCanvasToBlob","append","JSON","stringify","deleteSigleResume","setDeleteItemId","queryClient","newData","filter","item","_id","setQueryData","handleResumeDownload","name","docName","replaceAll","filename","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","resumeToggleAccordian","accordian","defaultValues","show","setShow","setOpen","length","values","resumeDeleteAccordianItem","remove","index","resumeOpensAccordianItem","trigger","open","resumeAddItemToAccoridan","fieldsCount","submitResumeFrom","initialData","watch","reset","setSubmitSuccess","result","title","resumes","getQueryData","find","findIndex","splice","unshift","keepDirty","keepValues","keepIsValid","keepErrors","useState","isOutside","setIsOutside","ref","useRef","handleClickOutside","e","current","contains","target","useEffect","addEventListener","removeEventListener","getAllResumeTemplates","getQuery","getAllResumes","fetcher","getQueryAdvance","getResumeTemplate","enabled","getResume","fetchResume"],"sourceRoot":""}