{"version":3,"file":"334.bundle.js","mappings":"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","sources":["webpack://user-dashboard/./src/apis/resume.ts","webpack://user-dashboard/./src/helpers/resume.ts","webpack://user-dashboard/./src/hooks/detectOutsideClick.ts","webpack://user-dashboard/./src/pages/404.tsx","webpack://user-dashboard/./src/queries/resumeQueries.ts"],"sourcesContent":["import axios from 'axios'\nimport axiosRequest from '../helpers/axiosRequest'\n\nexport const downloadResume = async (id: string, type: string) => {\n  let res\n  const options = {\n    method: 'GET',\n    url: `/resume/download/${id}/${type}`,\n    responseType: 'blob',\n  }\n  try {\n    res = await axios.request(options as any)\n\n    return res\n  } catch (err: any) {\n    if (err.response && err.response.data) {\n      const data = await new Response(err.response.data).text()\n      const message = JSON.parse(data).error.message || null\n      if (message && message === 'download limits reached!') {\n        return (res = 'limit reached')\n      }\n    }\n    return (res = null)\n  }\n}\n\nexport const newResume = async (templateName?: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'POST',\n    url: '/resume',\n    data: {\n      template: templateName,\n    },\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nlet cancelToken: any\n\nexport const updateResume = async (reqData: any) => {\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel('Cancelling previous requests')\n  }\n\n  cancelToken = axios.CancelToken.source()\n\n  const options = {\n    method: 'PATCH',\n    url: '/resume',\n    cancelToken: cancelToken.token,\n    data: reqData,\n  }\n\n  const res: { data: any; error: any } = await axios\n    .request(options as any)\n    .then((res) => {\n      return { data: res.data, error: undefined }\n    })\n    .catch((error) => {\n      {\n        return { data: undefined, error: error }\n      }\n    })\n  return res\n}\n\nexport const uploadPicture = async (id: string, reqData: any) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'PATCH',\n    url: `/resume/${id}/avatar`,\n    headers: { 'Content-Type': 'multipart/form-data' },\n    data: reqData,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nexport const deletePicture = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/resume/${id}/avatar`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nexport const deleteResume = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/resume/${id}`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n","import axios from 'axios'\nimport { UseFormReset, UseFormWatch } from 'react-hook-form/dist/types/form'\nimport { QueryClient } from 'react-query'\nimport {\n  deletePicture,\n  deleteResume,\n  downloadResume,\n  updateResume,\n  uploadPicture,\n} from '../apis/resume'\nimport { IImgTransformStyle } from '../typings/imageUpload'\nimport { IResumeDefault } from '../typings/resume'\n\n/**\n * Uploads Resume Avatar\n * @param formData multipart/form-data\"\n * @param data resume data object\n * @param loading state as boolean\n * @param setLoading setstate Fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns void\n */\nexport const uploadResumeAvatar = async (\n  formData: FormData,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: boolean) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (loading || !data.id) return\n  setLoading(true)\n  try {\n    const { data: resData, error } = await uploadPicture(data.id, formData)\n    if (resData && !error) {\n      setValue('avatar', resData.fields.avatar)\n    } else {\n      throw new Error('Failed to upload image')\n    }\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to upload image',\n    })\n  }\n\n  return setLoading(false)\n}\n\n/**\n * Deletes uploaded resume avatar\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns boolean\n */\nexport const deleteResumeAvatar = async (\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: boolean) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (loading || !data.id) return\n  setLoading(true)\n  try {\n    const { data: resData, error } = await deletePicture(data.id)\n    if (resData && !error) {\n      /* istanbul ignore next line */\n      setValue('avatar', resData.fields.avatar)\n    } else throw new Error('Failed to delete Image')\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete image',\n    })\n  }\n\n  return setLoading(false)\n}\n\n/**\n * Appends image blob to form data\n * @param orignalImage unproccessed image file blob / url string\n * @param processedCanvas proccessed blob from canvas\n * @param style image transform styles\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n */\nexport const appendBlobToFromData = async (\n  orignalImage: File | string,\n  processedCanvas: HTMLCanvasElement,\n  style: IImgTransformStyle,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: any) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  const formData = new FormData()\n\n  return processedCanvas.toBlob(\n    (blob) => {\n      /* istanbul ignore next line */\n      processdCanvasToBlob(\n        blob,\n        formData,\n        orignalImage,\n        style,\n        data,\n        loading,\n        setLoading,\n        setValue,\n        setNotify\n      )\n    },\n    'image/jpeg',\n    80\n  )\n}\n\n/**\n * Appends formdata and uploads\n * @param blob Blob | null\n * @param formData from FormData()\n * @param orignalImage unproccessed image file blob / url string\n * @param style image transform styles\n * @param data resume data object\n * @param loading state\n * @param setLoading setState fn\n * @param setValue from useFormContext()\n * @param setNotify from useNotify()\n * @returns\n */\nexport const processdCanvasToBlob = (\n  blob: Blob | null,\n  formData: FormData,\n  orignalImage: File | string,\n  style: IImgTransformStyle,\n  data: IResumeDefault & {\n    id: string | null\n  },\n  loading: boolean,\n  setLoading: (_val: any) => void,\n  setValue: any,\n  setNotify: (_val: any) => void\n) => {\n  if (!blob) return\n  formData.append('processed', blob, 'processed.jpg')\n  formData.append('image', orignalImage)\n  formData.append('style', JSON.stringify(style))\n  return uploadResumeAvatar(\n    formData,\n    data,\n    loading,\n    setLoading,\n    setValue,\n    setNotify\n  )\n}\n\n/**\n * Deletes single user resume\n * @param id resume object _id\n * @param data resume data\n * @param loading resume id in loading state or null\n * @param setLoading setState fn\n * @param setDeleteItemId setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQureyClient\n * @returns void\n */\nexport const deleteSigleResume = async (\n  id: string,\n  data: Record<string, any>,\n  loading: string | null,\n  setLoading: (_val: any) => void,\n  setDeleteItemId: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  setDeleteItemId(null)\n  if (loading) return\n  setLoading(id)\n  try {\n    const { data: resData, error } = await deleteResume(id)\n    if (resData && !error) {\n      if (!data || !data.items) return\n      const newData = data.items.filter((item: any) => item._id !== id)\n      data.items = newData\n      queryClient.setQueryData('resumes', data)\n    } else throw new Error('Failed to delete resume')\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete resume',\n    })\n  }\n  return setLoading(null)\n}\n\n/**\n * Download user created resume\n * @param name titile of the resume\n * @param id resume object _id\n * @param type document type to download\n * @param setNotify from useNotify()\n * @param setLimitsReached from setState fn\n * @returns void\n */\nexport const handleResumeDownload = async (\n  name: string,\n  id: string,\n  type: 'pdf' | 'docx' | 'txt',\n  setNotify: (_val: any) => void,\n  setLimitsReached?: (_val: boolean) => void\n) => {\n  const res: any = await downloadResume(id, type)\n\n  if (res) {\n    if (res === 'limit reached' && setLimitsReached) {\n      return setLimitsReached(true)\n    }\n\n    if (res.data) {\n      const docName = name ? name.replaceAll(/\\s/g, '-') : 'untitled-resume'\n\n      const filename = docName + '.' + type\n\n      const url = window.URL.createObjectURL(new Blob([res.data]))\n      const link = document.createElement('a')\n      link.href = url\n      link.setAttribute('download', filename)\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      return window.URL.revokeObjectURL(url)\n    }\n  }\n  return setNotify({\n    type: 'danger',\n    heading: 'Err!',\n    message: 'Failed to donwload design',\n  })\n}\n\n/**\n * Toggles resume accoridan\n * @param name field of the accoridan\n * @param accordian accordian object from data\n * @param defaultValues defauly values for accordian\n * @param append from useFieldArray()\n * @param show should expand accordian\n * @param setShow setState fn\n * @param setOpen setState Fn\n */\nexport const resumeToggleAccordian = (\n  name: string,\n  accordian: any,\n  defaultValues: any,\n  append: any,\n  show: boolean,\n  setShow: (_val: any) => void,\n  setOpen: (_val: any) => void\n) => {\n  if (!show) {\n    if (!accordian || accordian.length === 0) {\n      const values: any = defaultValues\n      setOpen(name + '.0')\n      append(values)\n    }\n    return setShow(name)\n  } else {\n    return setShow(null)\n  }\n}\n/**\n * Removes items from accoridan\n * @param remove from useFieldArray()\n * @param index of the item\n */\nexport const resumeDeleteAccordianItem = (remove: any, index: number) => {\n  return remove(index)\n}\n\n/**\n * Opens Accrodian Items\n * @param name accordian identifier\n * @param index position of item in accordian list\n * @param trigger from useFormContext()\n * @param open accoridain items thats expanded\n * @param setOpen setState fn\n */\nexport const resumeOpensAccordianItem = (\n  name: string,\n  index: number,\n  trigger: any,\n  open: string | null,\n  setOpen: (_val: any) => void\n) => {\n  if (open === name + '.' + index) {\n    trigger(name)\n    setOpen(null)\n  } else {\n    setOpen(name + '.' + index)\n  }\n}\n\n/**\n * Adds Items to Resume Accoridian\n * @param name accoridan identifier\n * @param fieldsCount total fields count\n * @param defaultValues defaltValues of accordian\n * @param append from useFielldArray()\n * @param setOpen setstate fn\n */\nexport const resumeAddItemToAccoridan = (\n  name: string,\n  fieldsCount: number,\n  defaultValues: any,\n  append: any,\n  setOpen: (_val: any) => void\n) => {\n  const values = defaultValues\n  setOpen(name + '.' + fieldsCount)\n  append(values)\n  //   clearErrors([`courses.${fields.length}.course`])\n}\n\n/**\n * Handlers resume form submit\n * @param template Name of the template\n * @param type type of template user want to download\n * @param initialData initaal resume data\n * @param data user filled form data from handleSubmit()\n * @param watch form useFrom() | useFormContext()\n * @param reset form useFrom() | useFormContext()\n * @param setSubmitSuccess setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQueryClient\n * @param setLimitsReached setState fn\n * @returns boolean\n */\nexport const submitResumeFrom = async (\n  template: string,\n  type: 'txt' | 'pdf' | 'docx' | null | undefined,\n  initialData: any,\n  data: any,\n  watch: UseFormWatch<any>,\n  reset: UseFormReset<any>,\n  setSubmitSuccess: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient,\n  setLimitsReached?: (_val: boolean) => void\n) => {\n  let result = false\n\n  try {\n    setSubmitSuccess(false)\n    if (!data) return result\n    const { data: resData, error } = await updateResume({\n      title: data.title,\n      template,\n      id: initialData._id,\n      ...data,\n    })\n    if (resData && !error) {\n      if (type) {\n        const name = resData.title ? resData.title : ''\n        await handleResumeDownload(\n          name,\n          initialData._id,\n          type as any,\n          setNotify,\n          setLimitsReached\n        )\n      }\n\n      const resumes: Array<any> | undefined =\n        queryClient.getQueryData('resumes')\n      if (resumes) {\n        const find = resumes.findIndex((item) => item._id === resData._id)\n        if (find >= 0) {\n          resumes.splice(find, 1, resData)\n        } else {\n          resumes.unshift(resData)\n        }\n        queryClient.setQueryData('resumes', resumes)\n      }\n\n      resData.fields = watch()\n\n      queryClient.setQueryData(['resume', resData._id], resData)\n      setSubmitSuccess(true)\n      reset(\n        {},\n        {\n          keepDirty: false,\n          keepValues: true,\n          keepIsValid: true,\n          keepErrors: true,\n        }\n      )\n    } else {\n      if (axios.isCancel(error)) setSubmitSuccess(true)\n      else {\n        throw new Error('Failed to update design')\n      }\n    }\n    result = true\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to update design',\n    })\n  }\n  return result\n}\n","import { useEffect, useRef, useState } from 'react'\n\n/**\n * Detects if user clicks outside element boundary, tweaked for multiple elements in same list\n * @returns ref object of selected element\n */\nconst detectOutsideClick = () => {\n  const [isOutside, setIsOutside] = useState(false)\n  const ref = useRef<any>(null)\n\n  const handleClickOutside = (e: any) => {\n    if (!ref || !ref.current) return\n    if (!ref.current.contains(e.target)) {\n      setIsOutside(true)\n    } else {\n      setIsOutside(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!ref || !ref.current) return\n    document.addEventListener('mousedown', handleClickOutside, true)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside, true)\n    }\n  }, [ref.current])\n\n  return { isOutside, ref }\n}\n\nexport default detectOutsideClick\n","import React from 'react'\n\nconst PageNotFound = () => {\n  return (\n    <div className='align-center'>\n      <div>\n        <h3 className='text-center'>This page could not be found</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default PageNotFound\n","import axios from 'axios'\nimport getQuery from '../hooks/getQuery'\nimport getQueryAdvance from '../hooks/getQueryAdvance'\nexport interface GetResumesParams {\n  title?: string\n  page: number\n  limit: number\n}\n/**\n * Gets All resume templates\n * @returns UseQueryResult\n */\nexport const getAllResumeTemplates = () => {\n  return getQuery('resumeTemplates', `/templates/resume`)\n}\n\n/**\n * Gets all user created resume\n * @returns UseQueryResult\n */\n// export const getAllResumes = () => {\n//   const fetcher = async () => {\n//     const { data } = await axios.get(`/resume`)\n//     return data\n//   }\n\n//   return getQueryAdvance('resumes', () => fetcher())\n// }\nexport const getAllResumes = (params: GetResumesParams, enabled?: boolean) => {\n  const fetcher = async () => {\n    const { data } = await axios.get(`/resume`, { params })\n    return data\n  }\n  return getQueryAdvance(['resumes', params], () => fetcher(), enabled)\n}\n\n/**\n * Gets single resume template\n * @param template resume template object _id\n * @param enabled should quey be enabled?\n * @returns UseQueryResult\n */\nexport const getResumeTemplate = (template: string, enabled?: boolean) => {\n  const fetcher = async (name: string) => {\n    const { data } = await axios.get(`/templates/resume/${name}`)\n    return data\n  }\n\n  return getQueryAdvance(\n    ['resumeTemplates', template],\n    () => fetcher(template),\n    enabled\n  )\n}\n/**\n * Gets single user resume\n * @param id resume object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getResume = (id: string, enabled?: boolean) => {\n  const fetchResume = async (id: string) => {\n    const { data } = await axios.get(`/resume/${id}`)\n    return data\n  }\n  return getQueryAdvance(['resume', id], () => fetchResume(id), enabled)\n}\n"],"names":["cancelToken","downloadResume","id","type","options","method","url","responseType","axios","res","response","data","Response","text","message","JSON","parse","error","newResume","templateName","template","axiosRequest","undefined","updateResume","reqData","cancel","token","then","uploadPicture","headers","deletePicture","deleteResume","uploadResumeAvatar","formData","loading","setLoading","setValue","setNotify","resData","fields","avatar","Error","heading","deleteResumeAvatar","appendBlobToFromData","orignalImage","processedCanvas","style","FormData","toBlob","blob","processdCanvasToBlob","append","stringify","deleteSigleResume","setDeleteItemId","queryClient","items","newData","filter","item","_id","setQueryData","handleResumeDownload","name","setLimitsReached","docName","replaceAll","filename","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","resumeToggleAccordian","accordian","defaultValues","show","setShow","setOpen","length","values","resumeDeleteAccordianItem","remove","index","resumeOpensAccordianItem","trigger","open","resumeAddItemToAccoridan","fieldsCount","submitResumeFrom","initialData","watch","reset","setSubmitSuccess","result","title","resumes","getQueryData","find","findIndex","splice","unshift","keepDirty","keepValues","keepIsValid","keepErrors","useState","isOutside","setIsOutside","ref","useRef","handleClickOutside","e","current","contains","target","useEffect","addEventListener","removeEventListener","className","getAllResumeTemplates","getQuery","getAllResumes","params","enabled","fetcher","getQueryAdvance","getResumeTemplate","getResume","fetchResume"],"sourceRoot":""}