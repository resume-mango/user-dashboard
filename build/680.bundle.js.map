{"version":3,"file":"680.bundle.js","mappings":"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","sources":["webpack://user-dashboard/./src/apis/coverLetter.ts","webpack://user-dashboard/./src/helpers/coverletter.ts","webpack://user-dashboard/./src/queries/coverLetterQueries.ts"],"sourcesContent":["import axios from 'axios'\nimport axiosRequest from '../helpers/axiosRequest'\n\nexport const downloadCoverLetter = async (id: string, type: string) => {\n  let res\n  const options = {\n    method: 'GET',\n    url: `/coverletter/download/${id}/${type}`,\n    responseType: 'blob',\n  }\n  try {\n    res = await axios.request(options as any)\n    return res\n  } catch (err: any) {\n    return (res = null)\n  }\n}\n\nexport const newCoverLetter = async (templateName?: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'POST',\n    url: '/coverletter',\n    data: {\n      template: templateName,\n    },\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nlet cancelToken: any\n\nexport const updateCoverLetter = async (reqData: any) => {\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel('Cancelling previous requests')\n  }\n\n  cancelToken = axios.CancelToken.source()\n\n  const options = {\n    method: 'PATCH',\n    url: '/coverletter',\n    cancelToken: cancelToken.token,\n    data: reqData,\n  }\n\n  const res: { data: any; error: any } = await axios\n    .request(options as any)\n    .then((res) => {\n      return { data: res.data, error: undefined }\n    })\n    .catch((error: any) => {\n      {\n        return { data: undefined, error: error }\n      }\n    })\n  return res\n}\n\nexport const deleteCoverLetter = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/coverletter/${id}`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n","import axios from 'axios'\nimport { UseFormReset, UseFormWatch } from 'react-hook-form/dist/types/form'\nimport { QueryClient } from 'react-query'\nimport {\n  deleteCoverLetter,\n  downloadCoverLetter,\n  newCoverLetter,\n  updateCoverLetter,\n} from '../apis/coverLetter'\n/**\n * Creates new Coverletter\n * @param templateName name of the coverletter template\n * @param history from UseHistory() hook\n * @param queryClient from QueryClient hook\n */\nexport const createNewCoverletter = async (\n  templateName: string,\n  history: any,\n  queryClient: QueryClient\n): Promise<boolean> => {\n  const { data, error } = await newCoverLetter(templateName)\n  if (data && !error) {\n    queryClient.setQueryData(['coverletter', data._id], data)\n    history.replace(`/coverletters/edit/${data._id}`)\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * Deletes single user coverletter\n * @param id coverletter object _id\n * @param data all coverletters list from getAllCoverLetters()\n * @param loading coverletter id in loading state or null\n * @param setLoading setState fn\n * @param setDeleteItemId setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQureyClient\n * @returns void\n */\nexport const deleteSingleCoverletter = async (\n  id: string,\n  data: Array<Record<string, any>>,\n  loading: string | null,\n  setLoading: (_val: any) => void,\n  setDeleteItemId: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  setDeleteItemId(null)\n  if (loading) return\n  setLoading(id)\n  try {\n    const { data: resData, error } = await deleteCoverLetter(id)\n    if (resData && !error) {\n      const newData = data.filter((item: any) => item._id !== id)\n      queryClient.setQueryData('coverletters', newData)\n    } else throw new Error('Failed to delete coverletter')\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete coverletter',\n    })\n  }\n  return setLoading(null)\n}\n\n/**\n * Download user created coverletter\n * @param name titile of the coverletter\n * @param id down object _id\n * @param type document type to download\n * @param setNotify from useNotify()\n * @returns void\n */\nexport const handleCoverletterDownload = async (\n  name: string,\n  id: string,\n  type: 'pdf' | 'docx' | 'txt',\n  setNotify: (_val: any) => void\n) => {\n  const res: any = await downloadCoverLetter(id, type)\n\n  if (!res || !res.data) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to donwload design',\n    })\n    return\n  }\n  const docName = name ? name.replaceAll(/\\s/g, '-') : 'untitled-coverletter'\n\n  const filename = docName + '.' + type\n\n  const url = window.URL.createObjectURL(new Blob([res.data]))\n  const link = document.createElement('a')\n  link.href = url\n  link.setAttribute('download', filename)\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n  return window.URL.revokeObjectURL(url)\n}\n\n/**\n * Handlers resume form submit\n * @param template Name of the template\n * @param type type of template user want to download\n * @param initialData initaal resume data\n * @param data user filled form data from handleSubmit()\n * @param watch form useFrom() | useFormContext()\n * @param reset form useFrom() | useFormContext()\n * @param setSubmitSuccess setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQueryClient\n * @returns boolean\n */\nexport const submitCoveletterForm = async (\n  template: string,\n  type: 'txt' | 'pdf' | 'docx' | null | undefined,\n  initialData: any,\n  data: any,\n  watch: UseFormWatch<any>,\n  reset: UseFormReset<any>,\n  setSubmitSuccess: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  let result = false\n\n  try {\n    setSubmitSuccess(false)\n    if (!data) return\n    const { data: resData, error } = await updateCoverLetter({\n      title: data.title,\n      template,\n      id: initialData._id,\n      ...data,\n    })\n\n    if (resData && !error) {\n      if (type) {\n        const name = resData.title ? resData.title : ''\n        await handleCoverletterDownload(\n          name,\n          initialData._id,\n          type as any,\n          setNotify\n        )\n      }\n\n      const coverletters: Array<any> | undefined =\n        queryClient.getQueryData('coverletters')\n      if (coverletters) {\n        const find = coverletters.findIndex((item) => item._id === resData._id)\n        if (find >= 0) {\n          coverletters.splice(find, 1, resData)\n        } else {\n          coverletters.unshift(resData)\n        }\n        queryClient.setQueryData('coverletters', coverletters)\n      }\n      resData.fields = watch()\n\n      queryClient.setQueryData(['coverletter', resData._id], resData)\n      setSubmitSuccess(true)\n      reset(\n        {},\n        {\n          keepDirty: false,\n          keepValues: true,\n          keepIsValid: true,\n          keepErrors: true,\n        }\n      )\n    } else {\n      if (axios.isCancel(error)) setSubmitSuccess(true)\n      else {\n        throw new Error('Failed to update design')\n      }\n    }\n    result = true\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to update design',\n    })\n  }\n  return result\n}\n","import axios from 'axios'\nimport getQuery from '../hooks/getQuery'\nimport getQueryAdvance from '../hooks/getQueryAdvance'\n\n/**\n * Gets All Coverletter templates\n * @returns UseQueryResult\n */\nexport const getAllCoverLetterTemplates = () => {\n  return getQuery('CoverLetterTemplates', `/templates/coverletter`)\n}\n\n/**\n * Gets all user created coverletters\n * @returns UseQueryResult\n */\nexport const getAllCoverLetters = () => {\n  const fetcher = async () => {\n    const { data } = await axios.get(`/coverletter`)\n    return data\n  }\n\n  return getQueryAdvance('coverletters', () => fetcher())\n}\n\n/**\n * Gets Single Coverletter Template\n * @param template object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getCoverLetterTemplate = (template: string, enabled?: boolean) => {\n  const fetcher = async (name: string) => {\n    const { data } = await axios.get(`/templates/coverletter/${name}`)\n    return data\n  }\n\n  return getQueryAdvance(\n    ['CoverLetterTemplates', template],\n    () => fetcher(template),\n    enabled\n  )\n}\n/**\n * Gets Single Coverletter\n * @param id coverletter object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getCoverLetter = (id: string, enabled?: boolean) => {\n  const fetchResume = async (id: string) => {\n    const { data } = await axios.get(`/coverletter/${id}`)\n    return data\n  }\n\n  return getQueryAdvance(['coverletter', id], () => fetchResume(id), enabled)\n}\n"],"names":["cancelToken","downloadCoverLetter","id","type","options","method","url","responseType","axios","res","newCoverLetter","templateName","data","template","axiosRequest","error","undefined","updateCoverLetter","reqData","cancel","token","then","deleteCoverLetter","createNewCoverletter","history","queryClient","setQueryData","_id","replace","deleteSingleCoverletter","loading","setLoading","setDeleteItemId","setNotify","resData","newData","filter","item","Error","heading","message","handleCoverletterDownload","name","docName","replaceAll","filename","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","submitCoveletterForm","initialData","watch","reset","setSubmitSuccess","result","title","coverletters","getQueryData","find","findIndex","splice","unshift","fields","keepDirty","keepValues","keepIsValid","keepErrors","getAllCoverLetterTemplates","getQuery","getAllCoverLetters","fetcher","getQueryAdvance","getCoverLetterTemplate","enabled","getCoverLetter","fetchResume"],"sourceRoot":""}