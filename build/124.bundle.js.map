{"version":3,"file":"124.bundle.js","mappings":"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","sources":["webpack://user-dashboard/./src/apis/coverLetter.ts","webpack://user-dashboard/./src/helpers/coverletter.ts","webpack://user-dashboard/./src/pages/404.tsx","webpack://user-dashboard/./src/queries/coverLetterQueries.ts","webpack://user-dashboard/./node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["import axios from 'axios'\nimport axiosRequest from '../helpers/axiosRequest'\n\nexport const downloadCoverLetter = async (id: string, type: string) => {\n  let res\n  const options = {\n    method: 'GET',\n    url: `/coverletter/download/${id}/${type}`,\n    responseType: 'blob',\n  }\n  try {\n    res = await axios.request(options as any)\n    return res\n  } catch (err: any) {\n    if (err.response && err.response.data) {\n      const data = await new Response(err.response.data).text()\n      const message = JSON.parse(data).error.message || null\n      console.log(message)\n      if (message && message === 'download limits reached!') {\n        return (res = 'limit reached')\n      }\n    }\n    return (res = null)\n  }\n}\n\nexport const newCoverLetter = async (templateName?: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'POST',\n    url: '/coverletter',\n    data: {\n      template: templateName,\n    },\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n\nlet cancelToken: any\n\nexport const updateCoverLetter = async (reqData: any) => {\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel('Cancelling previous requests')\n  }\n\n  cancelToken = axios.CancelToken.source()\n\n  const options = {\n    method: 'PATCH',\n    url: '/coverletter',\n    cancelToken: cancelToken.token,\n    data: reqData,\n  }\n\n  const res: { data: any; error: any } = await axios\n    .request(options as any)\n    .then((res) => {\n      return { data: res.data, error: undefined }\n    })\n    .catch((error: any) => {\n      {\n        return { data: undefined, error: error }\n      }\n    })\n  return res\n}\n\nexport const deleteCoverLetter = async (id: string) => {\n  let data\n  let error: string\n\n  const options = {\n    method: 'DELETE',\n    url: `/coverletter/${id}`,\n  }\n\n  try {\n    const res = await axiosRequest(options)\n    data = res.data as any\n    error = res.error\n    return { data, error }\n  } catch (err: any) {\n    return { data: undefined, error: err }\n  }\n}\n","import axios from 'axios'\nimport { UseFormReset, UseFormWatch } from 'react-hook-form/dist/types/form'\nimport { QueryClient } from 'react-query'\nimport {\n  deleteCoverLetter,\n  downloadCoverLetter,\n  newCoverLetter,\n  updateCoverLetter,\n} from '../apis/coverLetter'\n/**\n * Creates new Coverletter\n * @param templateName name of the coverletter template\n * @param history from UseHistory() hook\n * @param queryClient from QueryClient hook\n */\nexport const createNewCoverletter = async (\n  templateName: string,\n  history: any,\n  queryClient: QueryClient\n): Promise<boolean> => {\n  const { data, error } = await newCoverLetter(templateName)\n  if (data && !error) {\n    queryClient.setQueryData(['coverletter', data._id], data)\n    history.replace(`/coverletters/edit/${data._id}`)\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * Deletes single user coverletter\n * @param id coverletter object _id\n * @param data all coverletters list from getAllCoverLetters()\n * @param loading coverletter id in loading state or null\n * @param setLoading setState fn\n * @param setDeleteItemId setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQureyClient\n * @returns void\n */\nexport const deleteSingleCoverletter = async (\n  id: string,\n  data: Record<string, any>,\n  loading: string | null,\n  setLoading: (_val: any) => void,\n  setDeleteItemId: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient\n) => {\n  setDeleteItemId(null)\n  if (loading) return\n  setLoading(id)\n  try {\n    const { data: resData, error } = await deleteCoverLetter(id)\n    console.log(resData, error)\n\n    if (resData && !error) {\n      if (!data || !data.items) return\n      const newData = data.items.filter((item: any) => item._id !== id)\n      data.items = newData\n      queryClient.setQueryData('coverletters', data)\n    } else throw new Error('Failed to delete coverletter')\n  } catch (err) {\n    console.log(err)\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to delete coverletter',\n    })\n  }\n  return setLoading(null)\n}\n\n/**\n * Download user created coverletter\n * @param name titile of the coverletter\n * @param id down object _id\n * @param type document type to download\n * @param setNotify from useNotify()\n * @param setLimitsReached setState fn\n * @returns void\n */\nexport const handleCoverletterDownload = async (\n  name: string,\n  id: string,\n  type: 'pdf' | 'docx' | 'txt',\n  setNotify: (_val: any) => void,\n  setLimitsReached: (_val: boolean) => void\n) => {\n  const res: any = await downloadCoverLetter(id, type)\n\n  if (res) {\n    if (res === 'limit reached') {\n      return setLimitsReached(true)\n    }\n    if (res.data) {\n      const docName = name\n        ? name.replaceAll(/\\s/g, '-')\n        : 'untitled-coverletter'\n\n      const filename = docName + '.' + type\n\n      const url = window.URL.createObjectURL(new Blob([res.data]))\n      const link = document.createElement('a')\n      link.href = url\n      link.setAttribute('download', filename)\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      return window.URL.revokeObjectURL(url)\n    }\n  }\n  return setNotify({\n    type: 'danger',\n    heading: 'Err!',\n    message: 'Failed to donwload design',\n  })\n}\n\n/**\n * Handlers resume form submit\n * @param template Name of the template\n * @param type type of template user want to download\n * @param initialData initaal resume data\n * @param data user filled form data from handleSubmit()\n * @param watch form useFrom() | useFormContext()\n * @param reset form useFrom() | useFormContext()\n * @param setSubmitSuccess setState fn\n * @param setNotify from useNotify()\n * @param queryClient from useQueryClient\n * @param setLimitsReached setState fn\n * @returns boolean\n */\nexport const submitCoveletterForm = async (\n  template: string,\n  type: 'txt' | 'pdf' | 'docx' | null | undefined,\n  initialData: any,\n  data: any,\n  watch: UseFormWatch<any>,\n  reset: UseFormReset<any>,\n  setSubmitSuccess: (_val: any) => void,\n  setNotify: (_val: any) => void,\n  queryClient: QueryClient,\n  setLimitsReached: (_val: boolean) => void\n) => {\n  let result = false\n\n  try {\n    setSubmitSuccess(false)\n    if (!data) return\n    const { data: resData, error } = await updateCoverLetter({\n      title: data.title,\n      template,\n      id: initialData._id,\n      ...data,\n    })\n\n    if (resData && !error) {\n      if (type) {\n        const name = resData.title ? resData.title : ''\n        await handleCoverletterDownload(\n          name,\n          initialData._id,\n          type as any,\n          setNotify,\n          setLimitsReached\n        )\n      }\n\n      const coverletters: Array<any> | undefined =\n        queryClient.getQueryData('coverletters')\n      if (coverletters) {\n        const find = coverletters.findIndex((item) => item._id === resData._id)\n        if (find >= 0) {\n          coverletters.splice(find, 1, resData)\n        } else {\n          coverletters.unshift(resData)\n        }\n        queryClient.setQueryData('coverletters', coverletters)\n      }\n      resData.fields = watch()\n\n      queryClient.setQueryData(['coverletter', resData._id], resData)\n      setSubmitSuccess(true)\n      reset(\n        {},\n        {\n          keepDirty: false,\n          keepValues: true,\n          keepIsValid: true,\n          keepErrors: true,\n        }\n      )\n    } else {\n      if (axios.isCancel(error)) setSubmitSuccess(true)\n      else {\n        throw new Error('Failed to update design')\n      }\n    }\n    result = true\n  } catch (err) {\n    setNotify({\n      type: 'danger',\n      heading: 'Err!',\n      message: 'Failed to update design',\n    })\n  }\n  return result\n}\n","import React from 'react'\n\nconst PageNotFound = () => {\n  return (\n    <div className='align-center'>\n      <div>\n        <h3 className='text-center'>This page could not be found</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default PageNotFound\n","import axios from 'axios'\nimport getQuery from '../hooks/getQuery'\nimport getQueryAdvance from '../hooks/getQueryAdvance'\n\nexport interface GetCoverletterParams {\n  title?: string\n  page: number\n  limit: number\n}\n\n/**\n * Gets All Coverletter templates\n * @returns UseQueryResult\n */\nexport const getAllCoverLetterTemplates = () => {\n  return getQuery('CoverLetterTemplates', `/templates/coverletter`)\n}\n\n/**\n * Gets all user created coverletters\n * @returns UseQueryResult\n */\n// export const getAllCoverLetters = () => {\n//   const fetcher = async () => {\n//     const { data } = await axios.get(`/coverletter`)\n//     return data\n//   }\n\n//   return getQueryAdvance('coverletters', () => fetcher())\n// }\nexport const getAllCoverLetters = (params: GetCoverletterParams) => {\n  const fetcher = async () => {\n    const { data } = await axios.get(`/coverletter`, { params })\n    return data\n  }\n  return getQueryAdvance(['coverletters', params], () => fetcher())\n}\n\n/**\n * Gets Single Coverletter Template\n * @param template object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getCoverLetterTemplate = (template: string, enabled?: boolean) => {\n  const fetcher = async (name: string) => {\n    const { data } = await axios.get(`/templates/coverletter/${name}`)\n    return data\n  }\n\n  return getQueryAdvance(\n    ['CoverLetterTemplates', template],\n    () => fetcher(template),\n    enabled\n  )\n}\n/**\n * Gets Single Coverletter\n * @param id coverletter object _id\n * @param enabled should query be enabled?\n * @returns UseQueryResult\n */\nexport const getCoverLetter = (id: string, enabled?: boolean) => {\n  const fetchResume = async (id: string) => {\n    const { data } = await axios.get(`/coverletter/${id}`)\n    return data\n  }\n\n  return getQueryAdvance(['coverletter', id], () => fetchResume(id), enabled)\n}\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}"],"names":["cancelToken","downloadCoverLetter","id","type","options","method","url","responseType","axios","res","response","data","Response","text","message","JSON","parse","error","console","log","newCoverLetter","templateName","template","axiosRequest","undefined","updateCoverLetter","reqData","cancel","token","then","deleteCoverLetter","createNewCoverletter","history","queryClient","setQueryData","_id","replace","deleteSingleCoverletter","loading","setLoading","setDeleteItemId","setNotify","resData","items","newData","filter","item","Error","heading","handleCoverletterDownload","name","setLimitsReached","docName","replaceAll","filename","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","submitCoveletterForm","initialData","watch","reset","setSubmitSuccess","result","title","coverletters","getQueryData","find","findIndex","splice","unshift","fields","keepDirty","keepValues","keepIsValid","keepErrors","className","getAllCoverLetterTemplates","getQuery","getAllCoverLetters","params","fetcher","getQueryAdvance","getCoverLetterTemplate","enabled","getCoverLetter","fetchResume","_typeof","obj","Symbol","iterator","constructor","prototype"],"sourceRoot":""}