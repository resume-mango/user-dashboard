{"version":3,"file":"313.bundle.js","mappings":"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","sources":["webpack://user-dashboard/./src/components/svgs/docx.tsx","webpack://user-dashboard/./src/components/svgs/download.tsx","webpack://user-dashboard/./src/components/svgs/dustbin.tsx","webpack://user-dashboard/./src/components/svgs/edit.tsx","webpack://user-dashboard/./src/components/svgs/pdf.tsx","webpack://user-dashboard/./src/components/svgs/plus.tsx","webpack://user-dashboard/./src/components/svgs/txt.tsx","webpack://user-dashboard/./src/components/ui/confirmation.tsx","webpack://user-dashboard/./src/components/ui/dashPageHeader.tsx","webpack://user-dashboard/./src/components/ui/subNavbar.tsx","webpack://user-dashboard/./src/helpers/axiosRequest.ts","webpack://user-dashboard/./src/hooks/getQuery.ts","webpack://user-dashboard/./src/styled/pages.ts"],"sourcesContent":["import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst DocxIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 18 21'\n        width={size || '1rem'}\n        className={className || ''}\n        height={size || '1rem'}\n        fill='none'\n      >\n        <path\n          d='M17.9081 8.10841C17.7427 7.60749 17.2925 7.29851 16.7229 7.28446C16.3829 7.2751 16.3829 7.2751 16.3829 6.92398C16.3829 6.32943 16.3829 5.73487 16.3829 5.14032C16.3829 4.87815 16.3002 4.6628 16.1302 4.46618C15.6111 3.87163 15.1012 3.26771 14.5867 2.67315C13.8838 1.86325 13.1901 1.04398 12.4872 0.229395C12.3953 0.12172 12.2897 0.0374522 12.1518 0C8.85335 0.00468153 5.55945 0.00468153 2.26555 0.00468153C1.83831 0.145127 1.64996 0.388567 1.6178 0.852039C1.6132 0.945669 1.6132 1.0393 1.6132 1.13293C1.6132 3.08513 1.6132 5.03733 1.6132 6.98953C1.6132 7.27978 1.60861 7.28446 1.33297 7.28914C0.506051 7.30319 0.00989869 7.79475 0.00530469 8.64679C-0.00388331 10.5522 0.000710694 12.4576 0.00530469 14.3629C0.00530469 14.597 0.0420567 14.8311 0.152313 15.0418C0.404983 15.5333 0.827631 15.7065 1.34216 15.7159C1.6132 15.7206 1.6178 15.7253 1.62239 15.9968C1.62239 17.1344 1.62239 18.272 1.62239 19.4049C1.62239 19.4939 1.62239 19.5782 1.62239 19.6671C1.63617 20.1727 1.95775 20.58 2.54579 20.5753C5.55945 20.5566 8.56852 20.566 11.5822 20.566C12.9007 20.566 14.2191 20.566 15.5376 20.566C15.974 20.566 16.2681 20.3178 16.3553 19.8825C16.3829 19.7514 16.3829 19.6156 16.3829 19.4845C16.3829 18.3188 16.3829 17.1578 16.3829 15.9921C16.3829 15.7206 16.3921 15.7159 16.6631 15.7112C16.7091 15.7112 16.755 15.7112 16.801 15.7065C17.3293 15.655 17.7244 15.4116 17.9127 14.8873C17.977 14.7047 18 14.5081 18 14.3161C18 12.4388 18 10.5569 18 8.67956C17.9954 8.48762 17.9678 8.29567 17.9081 8.10841ZM2.67442 0.805223C5.5962 0.809905 8.51339 0.809905 11.4352 0.805223C11.596 0.805223 11.6419 0.837994 11.6373 1.01121C11.6281 2.26118 11.6327 3.51115 11.6327 4.76112C11.6327 5.21991 11.7522 5.33695 12.207 5.33695C13.2498 5.33695 14.2926 5.34163 15.3355 5.33226C15.4779 5.33226 15.5238 5.36035 15.5238 5.51484C15.5146 6.06258 15.5101 6.61032 15.5238 7.15806C15.5284 7.3266 15.4687 7.35 15.3263 7.35C13.2131 7.34532 11.0998 7.34532 8.98657 7.34532C6.88252 7.34532 4.77388 7.34532 2.66982 7.35C2.50903 7.35 2.46769 7.30787 2.46769 7.14402C2.47228 5.09819 2.47228 3.05236 2.46769 1.00653C2.46769 0.837994 2.51363 0.805223 2.67442 0.805223ZM11.5776 12.3265C11.9773 12.6355 12.4413 12.6355 12.9098 12.5325C13.2314 12.4622 13.2268 12.4529 13.2912 12.7946C13.2957 12.8227 13.3003 12.8461 13.3049 12.8742C13.383 13.2441 13.383 13.2441 13.0201 13.3236C12.942 13.3424 12.8639 13.3564 12.7858 13.3611C12.6434 13.3751 12.4964 13.3845 12.3172 13.3985C11.5041 13.3845 10.7369 13.1738 10.3234 12.3358C9.75377 11.1889 10.0754 9.37711 11.8073 9.01663C12.2897 8.91363 12.772 8.93704 13.2452 9.07749C13.3692 9.11494 13.4382 9.16176 13.3784 9.31625C13.3233 9.45669 13.2912 9.61118 13.2682 9.76099C13.2452 9.90612 13.1855 9.92016 13.0615 9.87335C12.6526 9.72354 12.2391 9.71418 11.8349 9.87803C11.4306 10.0419 11.1963 10.3602 11.1182 10.7862C11.0171 11.3714 11.0722 11.9285 11.5776 12.3265ZM9.63433 11.142C9.62514 11.8864 9.43219 12.5559 8.812 13.0193C7.94833 13.6654 6.61607 13.4828 6.00507 12.6448C5.30219 11.6757 5.49054 10.0653 6.39096 9.36306C7.30976 8.64679 8.7385 8.89023 9.30815 9.8593C9.53785 10.2526 9.63892 10.6833 9.63433 11.142ZM1.51673 13.3283C1.37891 13.3143 1.40188 13.23 1.40188 13.1457C1.40188 12.4903 1.40188 11.8349 1.40188 11.1842C1.40188 10.5709 1.41107 9.95293 1.39729 9.33965C1.39269 9.14771 1.42485 9.06812 1.63617 9.0494C2.27015 8.99322 2.90412 8.96045 3.53809 9.07281C4.48445 9.23666 5.10924 9.95762 5.1368 10.9361C5.15518 11.6196 5.02195 12.2516 4.51661 12.7478C4.15369 13.1036 3.69429 13.2581 3.20732 13.3236C2.64226 13.4032 2.08179 13.3798 1.51673 13.3283ZM15.3171 19.5313C13.2085 19.5267 11.1044 19.5267 8.99576 19.5267C6.8963 19.5267 4.79685 19.522 2.69739 19.5313C2.49985 19.5313 2.46309 19.4752 2.46309 19.2879C2.47228 18.1362 2.47228 16.9893 2.46309 15.8376C2.46309 15.6925 2.49066 15.6457 2.64226 15.6457C6.87333 15.6504 11.109 15.6504 15.3401 15.6457C15.4917 15.6457 15.5238 15.6878 15.5238 15.8376C15.5192 17.0033 15.5146 18.1643 15.5238 19.33C15.5284 19.4986 15.4733 19.5313 15.3171 19.5313ZM16.3094 13.3283C16.2083 13.3283 16.2037 13.2394 16.1716 13.1785C15.9465 12.7197 15.7214 12.2609 15.4871 11.774C15.2987 12.2001 15.1012 12.5933 14.9496 13.0006C14.8531 13.2628 14.7153 13.3564 14.4488 13.3283C14.2145 13.3002 13.9757 13.3236 13.7092 13.3236C14.0859 12.6542 14.4351 12.0081 14.8072 11.3761C14.9128 11.1982 14.899 11.0765 14.8026 10.908C14.4488 10.2947 14.1135 9.67204 13.7551 9.02131C14.1181 9.02131 14.4534 9.02131 14.7934 9.02131C14.8853 9.02131 14.8899 9.1009 14.9128 9.15707C15.1196 9.60182 15.3263 10.0466 15.5468 10.5241C15.7352 10.0606 15.9189 9.62523 16.1119 9.19921C16.1762 9.05876 16.2451 9.01663 16.3875 9.02131C16.6769 9.03535 16.9618 9.02599 17.2558 9.02599C17.2604 9.11494 17.2052 9.16644 17.1731 9.2273C16.8423 9.81249 16.5161 10.3977 16.1808 10.9735C16.1165 11.0859 16.1211 11.1655 16.1854 11.2778C16.5759 11.9473 16.9526 12.6214 17.3568 13.3236C16.9801 13.3283 16.6448 13.3283 16.3094 13.3283Z'\n          fill={color || '#898989'}\n        />\n        <path\n          d='M4.00152 10.4349C3.91423 10.2429 3.79019 10.0791 3.61562 9.96673C3.26188 9.72797 2.86221 9.72797 2.45793 9.76075C2.34768 9.77011 2.36605 9.85438 2.36605 9.9246C2.36605 10.3459 2.36605 10.7673 2.36605 11.1886C2.36605 11.61 2.36605 12.0313 2.36605 12.4526C2.36605 12.5182 2.3339 12.6071 2.45793 12.6118C2.85302 12.6259 3.23891 12.6071 3.58806 12.3731C4.17609 11.9798 4.23122 10.9452 4.00152 10.4349Z'\n          fill={color || '#898989'}\n        />\n        <path\n          d='M7.59886 9.72797C7.25431 9.73265 6.99245 9.90586 6.81788 10.2148C6.64331 10.5191 6.59277 10.8515 6.59277 11.198C6.59277 11.535 6.6525 11.8627 6.82707 12.1577C7.19918 12.7897 8.06285 12.7897 8.40281 12.1389C8.72899 11.5069 8.72899 10.8562 8.40281 10.2195C8.23283 9.8965 7.9526 9.72797 7.59886 9.72797Z'\n          fill={color || '#898989'}\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default DocxIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst DownloadIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        width={size || '1rem'}\n        height={size || '1rem'}\n        className={className || ''}\n        viewBox='0 0 16 16'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M14.75 10.25V13.25C14.75 13.6478 14.592 14.0294 14.3107 14.3107C14.0294 14.592 13.6478 14.75 13.25 14.75H2.75C2.35218 14.75 1.97064 14.592 1.68934 14.3107C1.40804 14.0294 1.25 13.6478 1.25 13.25V10.25'\n          stroke={color || '#898989'}\n          strokeWidth='1.6'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        />\n        <path\n          d='M4.25 6.5L8 10.25L11.75 6.5'\n          stroke={color || '#898989'}\n          strokeWidth='1.6'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        />\n        <path\n          d='M8 10.25V1.25'\n          stroke={color || '#898989'}\n          strokeWidth='1.6'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default DownloadIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst DustBinIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        width={size || '1rem'}\n        height={size || '1rem'}\n        className={className || ''}\n        viewBox='0 0 19 19'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M6.08594 2.13281H5.90625C6.00508 2.13281 6.08594 2.05195 6.08594 1.95312V2.13281H12.9141V1.95312C12.9141 2.05195 12.9949 2.13281 13.0938 2.13281H12.9141V3.75H14.5312V1.95312C14.5312 1.16025 13.8866 0.515625 13.0938 0.515625H5.90625C5.11338 0.515625 4.46875 1.16025 4.46875 1.95312V3.75H6.08594V2.13281ZM17.4062 3.75H1.59375C1.19619 3.75 0.875 4.07119 0.875 4.46875V5.1875C0.875 5.28633 0.955859 5.36719 1.05469 5.36719H2.41133L2.96611 17.1143C3.00205 17.8802 3.63545 18.4844 4.40137 18.4844H14.5986C15.3668 18.4844 15.9979 17.8824 16.0339 17.1143L16.5887 5.36719H17.9453C18.0441 5.36719 18.125 5.28633 18.125 5.1875V4.46875C18.125 4.07119 17.8038 3.75 17.4062 3.75ZM14.4257 16.8672H4.57432L4.03076 5.36719H14.9692L14.4257 16.8672Z'\n          fill={color || '#898989'}\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default DustBinIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst EditIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 16 16'\n        width={size || '1rem'}\n        className={className || ''}\n        height={size || '1rem'}\n        fill='none'\n      >\n        <path\n          d='M3.0332 12.6875C3.07227 12.6875 3.11133 12.6836 3.15039 12.6777L6.43555 12.1016C6.47461 12.0938 6.51172 12.0762 6.53906 12.0469L14.8184 3.76758C14.8365 3.74951 14.8508 3.72805 14.8606 3.70442C14.8704 3.68079 14.8755 3.65546 14.8755 3.62988C14.8755 3.6043 14.8704 3.57897 14.8606 3.55535C14.8508 3.53172 14.8365 3.51026 14.8184 3.49219L11.5723 0.244141C11.5352 0.207031 11.4863 0.1875 11.4336 0.1875C11.3809 0.1875 11.332 0.207031 11.2949 0.244141L3.01562 8.52344C2.98633 8.55273 2.96875 8.58789 2.96094 8.62695L2.38477 11.9121C2.36577 12.0167 2.37255 12.1244 2.40454 12.2258C2.43654 12.3273 2.49276 12.4193 2.56836 12.4941C2.69727 12.6191 2.85938 12.6875 3.0332 12.6875ZM4.34961 9.28125L11.4336 2.19922L12.8652 3.63086L5.78125 10.7129L4.04492 11.0195L4.34961 9.28125ZM15.1875 14.3281H0.8125C0.466797 14.3281 0.1875 14.6074 0.1875 14.9531V15.6562C0.1875 15.7422 0.257812 15.8125 0.34375 15.8125H15.6562C15.7422 15.8125 15.8125 15.7422 15.8125 15.6562V14.9531C15.8125 14.6074 15.5332 14.3281 15.1875 14.3281Z'\n          fill={color || '#898989'}\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default EditIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst PdfIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 18 20'\n        width={size || '1rem'}\n        className={className || ''}\n        height={size || '1rem'}\n        fill='none'\n      >\n        <path\n          d='M17.8993 7.82543C17.7163 7.33015 17.2817 7.0645 16.6549 7.0555C16.3895 7.05099 16.3803 7.04649 16.3803 6.78084C16.3803 6.1865 16.3758 5.59217 16.3803 4.99783C16.3803 4.74119 16.298 4.52506 16.1241 4.33145C15.4149 3.53 14.6966 2.73305 13.9829 1.93159C13.4659 1.35077 12.958 0.765434 12.4364 0.198112C12.322 0.0765434 12.1985 0 12.0292 0C8.82649 0 5.62377 0 2.42105 0C2.18313 0 1.99097 0.090051 1.83541 0.261148C1.64325 0.47727 1.61579 0.733916 1.61579 1.00407C1.61579 2.92666 1.61579 4.85375 1.61579 6.77634C1.61579 7.03749 1.60664 7.04649 1.3367 7.05099C0.503992 7.0645 0.00985844 7.53727 0.00528312 8.35673C-0.00386751 10.1983 0.000707804 12.0353 0.00528312 13.8769C0.00528312 14.0975 0.0373103 14.3136 0.142543 14.5162C0.380459 14.9935 0.796813 15.1736 1.31382 15.1871C1.61579 15.1961 1.61579 15.1961 1.61579 15.4933C1.61579 16.0741 1.61579 16.6549 1.61579 17.2358C1.61579 17.8121 1.61122 18.3839 1.62037 18.9602C1.62952 19.4555 1.82168 19.7122 2.27006 19.8562C6.731 19.8562 11.1965 19.8562 15.6574 19.8562C15.8405 19.8292 16.0097 19.7797 16.1424 19.6356C16.3392 19.424 16.3849 19.1674 16.3849 18.9017C16.3849 17.7806 16.3849 16.6549 16.3849 15.5293C16.3849 15.1961 16.3849 15.2006 16.7281 15.1826C17.2542 15.1601 17.666 14.953 17.8856 14.4577C17.9725 14.2596 18 14.048 18 13.8318C18 12.0173 18 10.2028 18 8.38825C17.9909 8.19914 17.9634 8.00554 17.8993 7.82543ZM2.4668 0.999566C2.4668 0.84648 2.49426 0.792449 2.66812 0.792449C5.59632 0.796951 8.51995 0.796951 11.4481 0.792449C11.6037 0.792449 11.6403 0.832972 11.6403 0.981556C11.6357 2.20175 11.6357 3.42194 11.6357 4.64213C11.6357 5.03385 11.773 5.16893 12.1665 5.16893C13.2234 5.16893 14.2803 5.17343 15.3372 5.16443C15.4927 5.16443 15.5339 5.20045 15.5293 5.35353C15.5202 5.87133 15.5202 6.38462 15.5293 6.90241C15.5339 7.069 15.4973 7.11403 15.3189 7.11403C13.2051 7.10502 11.0958 7.10953 8.98205 7.10953C6.88198 7.10953 4.78191 7.10502 2.68184 7.11403C2.50341 7.11403 2.47138 7.0645 2.47138 6.90241C2.47138 4.9348 2.47138 2.96718 2.4668 0.999566ZM6.95519 11.2969C6.95519 10.4054 6.95519 9.51389 6.95519 8.62689C6.95519 8.54584 6.93231 8.4648 7.06957 8.45129C8.04869 8.34773 9.03238 8.25768 10.0069 8.4648C11.4344 8.76647 12.226 9.77954 12.1802 11.2159C12.1573 11.9588 11.9835 12.6567 11.471 13.2375C11.0409 13.7283 10.4736 13.9804 9.85136 14.1155C8.93172 14.3181 8.00293 14.2686 7.07415 14.183C6.93689 14.1695 6.95976 14.093 6.95976 14.0119C6.95519 13.1024 6.95519 12.1974 6.95519 11.2969ZM2.05045 14.201C1.90404 14.2055 1.86286 14.1695 1.86744 14.0209C1.87659 13.1159 1.87201 12.2154 1.87201 11.3104C1.87201 10.4144 1.87201 9.51839 1.87201 8.61788C1.87201 8.51883 1.87201 8.45129 2.0047 8.43778C2.86028 8.34323 3.71129 8.28019 4.57145 8.41977C5.76561 8.61338 6.17281 9.56342 6.10418 10.3334C6.00352 11.441 5.24859 11.9047 4.43419 12.0623C4.08189 12.1299 3.72044 12.1659 3.35899 12.1164C3.22173 12.0984 3.19885 12.1479 3.19885 12.2695C3.20343 12.8548 3.19885 13.4446 3.20343 14.0299C3.20343 14.156 3.1714 14.1965 3.03872 14.192C2.70472 14.1875 2.3753 14.1875 2.05045 14.201ZM15.3143 18.8747C13.2005 18.8702 11.0867 18.8702 8.97748 18.8702C6.87741 18.8702 4.77734 18.8702 2.67727 18.8747C2.52171 18.8747 2.4668 18.8432 2.4668 18.6766C2.47595 17.5509 2.47595 16.4298 2.4668 15.3042C2.4668 15.1646 2.49426 15.1196 2.64982 15.1196C6.88198 15.1241 11.1142 15.1241 15.3463 15.1196C15.5019 15.1196 15.5293 15.1646 15.5248 15.3042C15.5202 16.4298 15.5156 17.5509 15.5248 18.6766C15.5248 18.8477 15.4698 18.8747 15.3143 18.8747ZM16.6686 8.55034C16.6549 8.80249 16.6594 9.05463 16.6686 9.30677C16.6732 9.43735 16.632 9.46886 16.5039 9.46886C15.8633 9.46436 15.2182 9.46886 14.5777 9.46436C14.4404 9.46436 14.3809 9.48237 14.3901 9.63996C14.4038 9.97315 14.3992 10.3108 14.3901 10.6485C14.3855 10.7701 14.4221 10.8016 14.5411 10.7971C15.1359 10.7926 15.7352 10.7971 16.33 10.7926C16.4673 10.7926 16.5267 10.8106 16.5176 10.9682C16.4993 11.2068 16.4993 11.4455 16.5176 11.6841C16.5267 11.8462 16.4627 11.8687 16.3209 11.8687C15.7352 11.8642 15.1542 11.8732 14.5685 11.8642C14.4175 11.8597 14.3855 11.9047 14.3855 12.0488C14.3947 12.7152 14.3855 13.3771 14.3947 14.0435C14.3947 14.183 14.358 14.2146 14.2208 14.21C13.8914 14.201 13.5665 14.1965 13.2371 14.21C13.0724 14.2191 13.0495 14.156 13.0495 14.0164C13.0541 13.1114 13.0541 12.2109 13.0541 11.3059C13.0541 10.3964 13.0587 9.48687 13.0495 8.57736C13.0495 8.43778 13.077 8.39275 13.2279 8.39726C14.3169 8.40626 15.4058 8.40176 16.4947 8.39726C16.6274 8.38375 16.6777 8.41076 16.6686 8.55034Z'\n          fill={color || '#898989'}\n        />\n        <path\n          d='M8.46232 13.2241C8.70024 13.2422 8.93358 13.2286 9.16692 13.1971C9.88525 13.1026 10.3931 12.7424 10.6265 12.0535C10.7683 11.6212 10.7912 11.18 10.7134 10.7342C10.6493 10.356 10.4983 10.0093 10.1781 9.75268C9.66106 9.34295 9.06626 9.32044 8.44402 9.37447C8.32049 9.38348 8.28388 9.433 8.28846 9.55457C8.29761 10.1399 8.29303 10.7297 8.29303 11.3151C8.29303 11.8869 8.29761 12.4632 8.28846 13.035C8.28846 13.1746 8.33879 13.2151 8.46232 13.2241Z'\n          fill={color || '#898989'}\n        />\n        <path\n          d='M3.29112 11.1124C3.64342 11.1574 3.98656 11.1484 4.30684 10.9863C4.66829 10.8062 4.80097 10.491 4.77809 10.1038C4.75979 9.7706 4.55848 9.51396 4.22448 9.40139C3.91793 9.30234 3.60681 9.32935 3.29112 9.36087C3.18588 9.36987 3.19046 9.44191 3.19046 9.51396C3.19046 9.75259 3.19046 9.99123 3.19046 10.2299C3.19046 10.482 3.19046 10.7342 3.19046 10.9818C3.19503 11.0583 3.20418 11.0989 3.29112 11.1124Z'\n          fill={color || '#898989'}\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default PdfIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst PlusIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        width={size || '1rem'}\n        height={size || '1rem'}\n        className={className || ''}\n        viewBox='0 0 20 19'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M19.5406 9.44757H0.0765508'\n          stroke={color || '#898989'}\n          strokeWidth='1.5'\n        />\n        <path\n          d='M9.81017 0.000184768L9.81017 18.8953'\n          stroke={color || '#898989'}\n          strokeWidth='1.5'\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default PlusIcon\n","import React, { Fragment } from 'react'\ninterface IconProps {\n  size?: string\n  color?: string\n  className?: string\n}\nconst TxtIcon = ({ size, color, className }: IconProps) => {\n  return (\n    <Fragment>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 18 21'\n        width={size || '1rem'}\n        className={className || ''}\n        height={size || '1rem'}\n        fill='none'\n      >\n        <path\n          d='M17.9965 8.5737C17.9919 7.83774 17.5059 7.36429 16.7791 7.3596C16.3717 7.35491 16.3717 7.35491 16.3717 6.94709C16.3717 6.32363 16.3717 5.70017 16.3717 5.0814C16.3717 4.88452 16.3162 4.72046 16.1866 4.57045C14.9553 3.15478 13.7286 1.73443 12.5019 0.309384C12.4047 0.192193 12.2982 0.0890652 12.1732 0C8.85419 0 5.53517 0 2.21615 0C2.20226 0.0140629 2.19301 0.0328135 2.17912 0.0421888C1.77176 0.201569 1.62363 0.520328 1.62826 0.942216C1.63289 2.99072 1.62826 5.03922 1.62826 7.08772C1.62826 7.1299 1.62363 7.16741 1.62826 7.20959C1.65141 7.34085 1.5866 7.36429 1.4755 7.3596C1.19776 7.35022 0.920021 7.34554 0.660795 7.47679C0.211778 7.7018 0.00347178 8.08618 0.00347178 8.57839C-0.00115726 10.5284 -0.00115726 12.4832 0.00347178 14.4379C0.00347178 15.1739 0.48952 15.652 1.21165 15.6614C1.62826 15.6661 1.62826 15.6661 1.62826 16.088C1.62826 17.2599 1.62826 18.4318 1.62826 19.6037C1.62826 20.2647 1.92915 20.5694 2.58647 20.5694C6.8637 20.5694 11.1409 20.5694 15.4182 20.5694C16.0709 20.5694 16.3717 20.26 16.3717 19.599C16.3717 18.3474 16.3764 17.0958 16.3671 15.8442C16.3671 15.6942 16.4041 15.652 16.5523 15.6614C16.8161 15.6755 17.0846 15.6755 17.3299 15.5536C17.779 15.3333 17.9965 14.9536 17.9965 14.4567C18.0012 12.4973 18.0012 10.5331 17.9965 8.5737ZM2.41983 1.01722C2.41983 0.839088 2.46149 0.796899 2.63739 0.801587C5.5722 0.806275 8.50701 0.806275 11.4464 0.801587C11.6362 0.801587 11.664 0.862526 11.664 1.03597C11.6594 2.28757 11.6594 3.53917 11.6594 4.79077C11.6594 5.20797 11.7936 5.33923 12.2056 5.33923C13.2657 5.33923 14.3211 5.34391 15.3811 5.33454C15.5478 5.33454 15.5848 5.38141 15.5848 5.54548C15.5755 6.08925 15.5755 6.62833 15.5848 7.17209C15.5894 7.32679 15.5431 7.3596 15.395 7.35491C13.261 7.35022 11.1224 7.35022 8.98843 7.35022C6.87296 7.35022 4.75749 7.35022 2.64202 7.35491C2.47538 7.35491 2.42446 7.3221 2.42446 7.13928C2.42446 5.10484 2.42446 3.06103 2.41983 1.01722ZM7.91449 11.2269C7.42381 10.3738 6.94702 9.51123 6.47023 8.6487C6.43783 8.59245 6.41006 8.53151 6.36377 8.44244C6.70631 8.44244 7.03035 8.47995 7.34512 8.43307C7.78488 8.36744 8.00244 8.54557 8.1552 8.9534C8.35888 9.48779 8.62736 9.99405 8.89122 10.5613C9.14119 9.87218 9.44207 9.24872 9.71982 8.61589C9.77999 8.47995 9.84943 8.43307 9.99756 8.43776C10.4327 8.45182 10.8678 8.44244 11.3029 8.44244C11.3215 8.52213 11.2659 8.56432 11.2381 8.61589C10.7428 9.4831 10.2522 10.355 9.75222 11.2175C9.67815 11.3441 9.68278 11.4332 9.75685 11.5597C10.3123 12.516 10.8586 13.477 11.4233 14.4708C11.2937 14.4708 11.1872 14.4708 11.0808 14.4708C10.9002 14.4708 10.7243 14.4754 10.5438 14.4708C10.3216 14.4661 10.0531 14.5551 9.88646 14.4379C9.72907 14.3254 9.6689 14.0676 9.57169 13.8707C9.33561 13.3926 9.10415 12.9145 8.86807 12.4363C8.84956 12.3988 8.84493 12.3426 8.78012 12.3191C8.51627 12.9988 8.19686 13.6504 7.90523 14.3207C7.85431 14.4379 7.79414 14.4754 7.67378 14.4754C7.22477 14.4708 6.77575 14.4708 6.3221 14.4708C6.32673 14.3817 6.37765 14.3301 6.41469 14.2645C6.90999 13.3832 7.4053 12.4973 7.90986 11.6207C7.98856 11.4753 7.99781 11.3769 7.91449 11.2269ZM1.45236 9.5956C1.33663 9.5956 1.29034 9.57217 1.29034 9.44091C1.2996 9.15497 1.29497 8.86433 1.29034 8.57839C1.29034 8.47526 1.31349 8.44244 1.41996 8.44244C2.85496 8.44713 4.28996 8.44713 5.72496 8.44244C5.82217 8.44244 5.86383 8.46119 5.86383 8.5737C5.85457 8.86902 5.85457 9.16434 5.86383 9.45966C5.86846 9.58623 5.81754 9.60029 5.71107 9.60029C5.27594 9.5956 4.83618 9.60498 4.40105 9.5956C4.25755 9.59092 4.22978 9.63779 4.22978 9.77374C4.23441 11.2738 4.22978 12.7738 4.23904 14.2739C4.23904 14.4426 4.20201 14.4848 4.03536 14.4801C3.7067 14.4661 3.37341 14.4708 3.04475 14.4801C2.91513 14.4848 2.88273 14.4426 2.88273 14.3161C2.88736 13.5613 2.88736 12.802 2.88736 12.0472C2.88736 11.2925 2.88273 10.5331 2.89199 9.77842C2.89199 9.64248 2.86422 9.60029 2.72072 9.60029C2.29947 9.5956 1.8736 9.58623 1.45236 9.5956ZM15.358 19.5475C13.2379 19.5428 11.1132 19.5428 8.99306 19.5428C6.87759 19.5428 4.76212 19.5381 2.64665 19.5475C2.45686 19.5475 2.41983 19.4912 2.42446 19.3131C2.43371 18.1599 2.42909 17.0115 2.42446 15.8583C2.42446 15.7083 2.45223 15.6567 2.61425 15.6567C6.87296 15.6614 11.1317 15.6614 15.3858 15.6567C15.5431 15.6567 15.5802 15.6989 15.5802 15.8583C15.5755 17.0161 15.5709 18.174 15.5802 19.3318C15.5848 19.524 15.52 19.5475 15.358 19.5475ZM16.1773 9.5956C15.7329 9.59092 15.2932 9.60029 14.8488 9.59092C14.7238 9.58623 14.696 9.62842 14.696 9.7503C14.7007 10.5144 14.7007 11.2738 14.7007 12.0379C14.7007 12.7926 14.696 13.552 14.7053 14.3067C14.7053 14.4379 14.6729 14.4754 14.5386 14.4754C14.1961 14.4661 13.8489 14.4661 13.5064 14.4754C13.3721 14.4801 13.349 14.4333 13.349 14.3067C13.3536 12.8066 13.349 11.3066 13.3582 9.81124C13.3582 9.62842 13.3073 9.58623 13.136 9.5956C12.7333 9.60967 12.3306 9.59092 11.9279 9.60498C11.7751 9.60967 11.7381 9.5581 11.7427 9.41279C11.752 9.1409 11.752 8.86433 11.7427 8.58776C11.7427 8.48932 11.7658 8.44713 11.8723 8.44713C13.3119 8.45182 14.7516 8.45182 16.1958 8.44713C16.3116 8.44713 16.3254 8.4987 16.3208 8.59245C16.3162 8.8784 16.3162 9.16903 16.3208 9.45498C16.3254 9.56279 16.2884 9.5956 16.1773 9.5956Z'\n          fill={color || '#898989'}\n        />\n      </svg>\n    </Fragment>\n  )\n}\n\nexport default TxtIcon\n","import React, { Fragment, ReactNode } from 'react'\nimport styled, { DefaultTheme, withTheme } from 'styled-components'\nimport WarningIcon from '../svgs/warning'\n\ninterface IProps {\n  theme: DefaultTheme\n  show: boolean\n  title: string\n  msg: string\n  children: ReactNode\n}\n\nconst ConfirmationBox: React.FC<IProps> = ({\n  theme,\n  show,\n  msg,\n  title,\n  children,\n}) => {\n  return (\n    <Fragment>\n      {show && (\n        <Wrapper className=\"confirmation-box\">\n          <Box>\n            <WarningIcon size=\"100px\" color={theme.colors.primary} />\n            <h2>{title}</h2>\n            <p>{msg}</p>\n            <ChildWrapper> {children}</ChildWrapper>\n          </Box>\n        </Wrapper>\n      )}\n    </Fragment>\n  )\n}\n\nexport default withTheme(ConfirmationBox)\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  z-index: 1000;\n  top: 0;\n  left: 0;\n  background-color: ${({ theme }) => theme.shades.dark[3]};\n`\n\nconst Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center !important;\n  align-items: center;\n  max-width: 500px;\n  max-height: 400px;\n  height: 100%;\n  width: 100%;\n  padding: 2rem;\n  border: 1px solid rgb(237 237 237 / 20%);\n  border-radius: 1rem;\n  background-color: #fff;\n\n  h2,\n  p {\n    text-align: center;\n    margin: 0 0 1rem;\n  }\n  p {\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n  }\n  svg {\n    margin-bottom: 2rem;\n  }\n`\n\nconst ChildWrapper = styled.div`\n  display: grid;\n  align-items: center;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 2rem;\n`\n","import React, { Fragment, ReactElement, ReactNode } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useAuth } from '../../contexts/authProvider'\nimport { useViewport } from '../../contexts/viewPort'\nimport { Button } from '../../styled/button'\nimport { DashHeader } from '../../styled/pages'\n\ninterface ILayout {\n  name?: string\n  title: string | ReactElement<any, any>\n  customBtns?: boolean\n  children?: ReactNode\n}\n\nconst DashPageHeader: React.FC<ILayout> = ({\n  name,\n  title,\n  children,\n  customBtns,\n}) => {\n  const { user } = useAuth()\n  const history = useHistory()\n  const { width } = useViewport()\n\n  return (\n    <Fragment>\n      <DashHeader>\n        <div>\n          {name && <p>{name}</p>}\n          <h1>{title}</h1>\n        </div>\n        {width > 800 && (\n          <div>\n            {!customBtns ? (\n              <Fragment>\n                {user &&\n                user.role &&\n                Array.isArray(user.role) &&\n                user.role.includes('ceo') ? (\n                  <Button\n                    onClick={() => history.push('/resumes/new')}\n                    btnType=\"primary\"\n                    size=\"sm\"\n                  >\n                    Create Resume\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={() => history.push('/subscribe')}\n                    btnType=\"primary\"\n                    size=\"sm\"\n                  >\n                    Upgrade\n                  </Button>\n                )}\n\n                <Button\n                  onClick={() => history.push('/progress-tracker')}\n                  btnType=\"ghost\"\n                  size=\"sm\"\n                >\n                  Tracker\n                </Button>\n              </Fragment>\n            ) : (\n              children\n            )}\n          </div>\n        )}\n      </DashHeader>\n    </Fragment>\n  )\n}\n\nexport default DashPageHeader\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst SubNavBar = ({\n  children,\n  style,\n}: {\n  children: ReactNode\n  style?: any\n}) => {\n  return <SubNav style={style}>{children}</SubNav>\n}\n\nconst SubNavLink = ({ children }: { children: ReactNode }) => {\n  return <li>{children}</li>\n}\nSubNavBar.Link = SubNavLink\n\nexport default SubNavBar\n\nconst SubNav = styled.ul`\n  display: flex;\n  padding: 0 0.875rem;\n  border-bottom: 1px solid #e2e9f3;\n  user-select: none;\n  li {\n    display: flex;\n    float: left;\n    padding: 0;\n    a {\n      color: #878787;\n      padding: 1.5rem 1rem 0.5rem;\n      margin: 0 1rem;\n      transition: color ease-in-out 300ms;\n      &:hover {\n        color: #f08438;\n      }\n      &.active {\n        font-weight: 700;\n        color: #f08438;\n        border-bottom: 2px solid #f08438;\n      }\n    }\n  }\n  @media (max-width: 480px) {\n    justify-content: space-between;\n    li {\n      a {\n        margin: 0 0.5rem;\n        padding: 0.5rem 0;\n        font-size: 0.8rem;\n      }\n    }\n  }\n`\n","import axios, { AxiosResponse } from 'axios'\n/**\n * Axios api request helper\n * @param options axios request options\n * @returns data | error\n */\nconst axiosRequest = async (\n  options: any\n): Promise<{ data: any; error: any }> => {\n  let data: any = ''\n  let error: any = ''\n  try {\n    const { data: res }: AxiosResponse<any> = await axios.request(options)\n    data = res || ''\n  } catch (err: any) {\n    error =\n      (err.response && err.response.data && err.response.data.error.message) ||\n      'Something went wrong!'\n  }\n\n  return { data, error }\n}\n\nexport default axiosRequest\n","import axios from 'axios'\nimport { useQuery } from 'react-query'\nimport { useAuth } from '../contexts/authProvider'\n\n/**\n * Simple Hook for useQuery()\n * @param identifier useQuery() fn queryKey identefier\n * @param url api enpoint route\n * @param params axios request params\n * @returns useQuery() fn\n */\nconst getQuery = (identifier: string, url: string, params?: string) => {\n  const { user, token } = useAuth()\n  const ref = user && user.ref\n  const fetcher = async () => {\n    const { data } = await axios.get(url, { params })\n    return data\n  }\n\n  return useQuery(identifier, fetcher, { enabled: !!token && !!ref })\n}\n\nexport default getQuery\n","import styled from 'styled-components'\n\nexport const ContentWrapper = styled.div<{ maxWidth: string }>`\n  width: 100%;\n  max-width: ${({ maxWidth }) => maxWidth};\n  p {\n    max-width: 575px;\n  }\n`\nexport const PaginationWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  button {\n    width: fit-content;\n    padding: 0 1rem;\n    margin: 0 1rem;\n  }\n`\nexport const DashHeader = styled.header`\n  min-height: 175px;\n  max-height: 175px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  border-bottom: 1px solid #e2e9f3;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem;\n  h1 {\n    margin-bottom: 0;\n    span {\n      font-weight: normal;\n    }\n  }\n  div:last-child {\n    display: flex;\n    button {\n      margin: 0 1rem;\n    }\n  }\n  @media (max-width: 768px) {\n    div:last-child {\n      flex-direction: column;\n    }\n  }\n  @media (max-width: 480px) {\n    max-height: 100px;\n    min-height: 100px;\n    h1 {\n      margin: 0;\n    }\n    div:last-child {\n      display: block;\n      width: 100%;\n    }\n  }\n`\n"],"names":["size","color","className","Fragment","xmlns","viewBox","width","height","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","withTheme","theme","show","msg","title","children","Wrapper","Box","colors","primary","ChildWrapper","styled","shades","dark","name","customBtns","user","useAuth","history","useHistory","useViewport","role","Array","isArray","includes","onClick","push","btnType","SubNavBar","style","SubNav","Link","options","data","error","axios","res","response","message","identifier","url","params","token","ref","fetcher","useQuery","enabled","ContentWrapper","maxWidth","PaginationWrapper","DashHeader"],"sourceRoot":""}