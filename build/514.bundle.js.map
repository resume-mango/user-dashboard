{"version":3,"file":"514.bundle.js","mappings":"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","sources":["webpack://user-dashboard/./src/components/hubspotForm.tsx","webpack://user-dashboard/./src/components/ui/dashPageHeader.tsx","webpack://user-dashboard/./src/pages/help-support.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nexport interface HubspotWindow extends Window {\n  hbspt: any\n  grecaptcha: any\n}\ndeclare let window: HubspotWindow\n\ninterface IHbsptFrom {\n  region: string\n  portalId: string\n  formId: string\n  target: string\n}\n\ninterface IProps {\n  id?: string\n  form: IHbsptFrom\n  formLoaded: boolean\n  setFormLoaded: (_val: boolean) => void\n}\n\nconst HubspotForm: React.FC<IProps> = ({\n  id,\n  form,\n  formLoaded,\n  setFormLoaded,\n}) => {\n  const [sdkReady, setSdkReady] = useState(false)\n\n  useEffect(() => {\n    if (window !== undefined && !window.hbspt && !sdkReady) {\n      setFormLoaded(false)\n      const script = document.createElement('script')\n      script.type = 'text/javascript'\n      script.src = `https://js.hsforms.net/forms/v2.js`\n      script.id = 'hbspt-forms'\n      script.async = true\n      script.onload = () => {\n        setSdkReady(true)\n      }\n      script.onerror = () => {\n        return console.log('Hubspot SDK could not be loaded.')\n      }\n      document.body.appendChild(script)\n    } else {\n      setSdkReady(true)\n    }\n    return () => {\n      const script = document.getElementById('hbspt-forms')\n      if (script) script.remove()\n      if (window.hbspt) delete window.hbspt\n      setSdkReady(true)\n    }\n  }, [])\n  useEffect(() => {\n    let timer: any\n    if (window.hbspt) {\n      try {\n        window.hbspt.forms.create({\n          region: form.region,\n          portalId: form.portalId,\n          formId: form.formId,\n          target: form.target,\n        })\n        timer = setTimeout(() => {\n          setFormLoaded(true)\n        }, 1000)\n      } catch (err) {\n        console.error('Failed to render form')\n      }\n    }\n    return () => {\n      timer && clearTimeout(timer)\n    }\n  }, [sdkReady])\n\n  return (\n    <Wrapper\n      id={id ? id : 'hubspotForm'}\n      className={!sdkReady || !formLoaded ? 'hide' : ''}\n    ></Wrapper>\n  )\n}\n\nexport default HubspotForm\n\nconst Wrapper = styled.div`\n  &.hide {\n    opacity: 0;\n    height: 0;\n  }\n`\n","import React, { Fragment, ReactElement, ReactNode } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useAuth } from '../../contexts/authProvider'\nimport { useViewport } from '../../contexts/viewPort'\nimport { Button } from '../../styled/button'\n\ninterface ILayout {\n  name?: string\n  title: string | ReactElement<any, any>\n  customBtns?: boolean\n  children?: ReactNode\n}\n\nconst DashPageHeader: React.FC<ILayout> = ({\n  name,\n  title,\n  children,\n  customBtns,\n}) => {\n  const { user } = useAuth()\n  const history = useHistory()\n  const { width } = useViewport()\n\n  return (\n    <Fragment>\n      <Header>\n        <div>\n          {name && <p>{name}</p>}\n          <h1>{title}</h1>\n        </div>\n        {width > 800 && (\n          <div>\n            {!customBtns ? (\n              <Fragment>\n                {user &&\n                user.role &&\n                Array.isArray(user.role) &&\n                user.role.includes('ceo') ? (\n                  <Button\n                    onClick={() => history.push('/resumes/new')}\n                    btnType=\"primary\"\n                    size=\"sm\"\n                  >\n                    Create Resume\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={() => history.push('/subscribe')}\n                    btnType=\"primary\"\n                    size=\"sm\"\n                  >\n                    Upgrade\n                  </Button>\n                )}\n\n                <Button\n                  onClick={() => history.push('/progress-tracker')}\n                  btnType=\"ghost\"\n                  size=\"sm\"\n                >\n                  Tracker\n                </Button>\n              </Fragment>\n            ) : (\n              children\n            )}\n          </div>\n        )}\n      </Header>\n    </Fragment>\n  )\n}\n\nexport default DashPageHeader\n\nconst Header = styled.header`\n  min-height: 175px;\n  max-height: 175px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  border-bottom: 1px solid #e2e9f3;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.5rem;\n  h1 {\n    margin-bottom: 0;\n    span {\n      font-weight: normal;\n    }\n  }\n  div:last-child {\n    display: flex;\n    button {\n      margin: 0 1rem;\n    }\n  }\n  @media (max-width: 768px) {\n    div:last-child {\n      flex-direction: column;\n    }\n  }\n  @media (max-width: 480px) {\n    max-height: 100px;\n    min-height: 100px;\n    h1 {\n      margin: 0;\n    }\n    div:last-child {\n      display: block;\n      width: 100%;\n    }\n  }\n`\n","import React, { Fragment, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport HubspotForm from '../components/hubspotForm'\nimport DashPageHeader from '../components/ui/dashPageHeader'\nimport { Spinner } from '../styled/loader'\n\nconst HelpSupport = () => {\n  const [formLoaded, setFormLoaded] = useState(false)\n\n  const loader = (\n    <div className=\"flex-center\">\n      <Spinner size=\"2rem\" type=\"primary\" />\n    </div>\n  )\n  return (\n    <Fragment>\n      <DashPageHeader name=\"Support\" title=\"Help & Support\"></DashPageHeader>\n\n      {!formLoaded && loader}\n\n      <Wrapper className={!formLoaded ? 'hide' : ''}>\n        <h3>Need Help ?</h3>\n        <p>\n          Contact us and a member of our team will reply to you within 48 hours!\n        </p>\n        {/* <div id=\"hubspotForm\"></div> */}\n        <HubspotForm\n          form={{\n            region: String(process.env.HUBSPOT_SUPPORT_REGION),\n            portalId: String(process.env.HUBSPOT_SUPPORT_PORTAL_ID),\n            formId: String(process.env.HUBSPOT_SUPPORT_FORM_ID),\n            target: '#hubspotForm',\n          }}\n          formLoaded={formLoaded}\n          setFormLoaded={setFormLoaded}\n        />\n      </Wrapper>\n    </Fragment>\n  )\n}\n\nexport default HelpSupport\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  padding: 1.5rem;\n  max-width: 800px;\n  p {\n    font-size: 1rem;\n  }\n  &.hide {\n    opacity: 0;\n    height: 0;\n  }\n`\n"],"names":["id","form","formLoaded","setFormLoaded","useState","sdkReady","setSdkReady","useEffect","undefined","window","hbspt","script","document","createElement","type","src","async","onload","onerror","console","log","body","appendChild","getElementById","remove","timer","forms","create","region","portalId","formId","target","setTimeout","err","error","clearTimeout","Wrapper","className","styled","name","title","children","customBtns","user","useAuth","history","useHistory","width","useViewport","Fragment","Header","role","Array","isArray","includes","onClick","push","btnType","size","loader","String","process"],"sourceRoot":""}