name: Build and Deploy React App to CloudFront

on:
  push:
    branches: ['main']

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

# env:
#   NEXT_PUBLIC_GOOGLE_ANALYTICS: ${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }}

env:
  S3_BUCKET: app.resumemango.com
  BUILD_DIR: build
  AWS_REGION: us-east-2
  CLOUDFRONT_DIST_ID: E1CQ0TZPU8ZEEH
  PROD_ENV_FILE: ${{ secrets.PROD_ENV_BASE_64 }}
  STAGING_ENV_FILE: ${{ secrets.STAGING_ENV_BASE_64 }}

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16.18.1
        uses: actions/setup-node@v3
        with:
          node-version: 16.18.1
          cache: 'npm'

      - name: Add Staging ENV File
        run: |
          echo $STAGING_ENV_FILE | base64 --decode > .env.staging

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Lints Project
        run: npm run lint

      - name: Tests Project
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
        run: npm run test

  deploy:
    needs: testing
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
          aws-region: ${{env.AWS_REGION}}

      - name: Add Production ENV File
        run: |
          echo $PROD_ENV_FILE | base64 --decode > .env.production

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Sentry cli
        run: npm i -g @sentry/cli

      - name: Build
        run: SENTRY_AUTH_TOKEN=${{secrets.SENTRY_AUTH_TOKEN}} npm run build

      - name: Copy files to the s3 with AWS CLI
        run: |
          aws s3 sync --delete ${{env.BUILD_DIR}} s3://${{env.S3_BUCKET}}

      - name: Invalidate Cloudfront cache
        run: |
          aws cloudfront create-invalidation \
          --distribution-id ${{env.CLOUDFRONT_DIST_ID}} \
          --paths "/*"
